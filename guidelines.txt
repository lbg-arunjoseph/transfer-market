src/main/resources/application.properties

# --- Database: H2 in-memory. Creates a fresh DB per run (useful for learning/testing)
quarkus.datasource.db-kind=h2
quarkus.datasource.jdbc.url=jdbc:h2:mem:transferdb;DB_CLOSE_DELAY=-1
quarkus.datasource.username=sa
quarkus.datasource.password=sa

# --- Hibernate ORM: auto-create schema each run (drop-and-create is great for a tutorial)
quarkus.hibernate-orm.database.generation=drop-and-create
quarkus.hibernate-orm.log.sql=true
quarkus.hibernate-orm.format-sql=true

# --- HTTP server bits
quarkus.http.port=8080
quarkus.http.cors=true




src/main/java/com/example/transfer/Club.java

package com.example.transfer;                                // package groups related classes

import io.quarkus.hibernate.orm.panache.PanacheEntity;       // Panache base entity (id + helpers)
import jakarta.persistence.*;                                // JPA annotations
import java.math.BigDecimal;                                 // precise money type
import java.util.List;                                       // list for players

@Entity                                                      // Marks this as a JPA entity (mapped to a table)
public class Club extends PanacheEntity {                    // Extends PanacheEntity => gets a Long id and helpers

    @Column(nullable = false, unique = true)                 // name must be present and unique across clubs
    public String name;

    @Column(nullable = false, precision = 19, scale = 2)     // money as DECIMAL(19,2)
    public BigDecimal budget;

    @OneToMany(mappedBy = "club",                            // players reference their club; 'club' is the owner side
               cascade = CascadeType.ALL,                    // propagate saves/deletes to players
               orphanRemoval = true)                         // remove players if they’re de-linked (not used here, but safe)
    public List<Player> players;                             // list of players for this club
}


src/main/java/com/example/transfer/Player.java

package com.example.transfer;

import com.fasterxml.jackson.annotation.JsonIgnore;           // to avoid infinite JSON loops with bidirectional links
import com.fasterxml.jackson.annotation.JsonProperty;         // to expose computed fields
import io.quarkus.hibernate.orm.panache.PanacheEntity;        // Panache base
import jakarta.persistence.*;                                 // JPA
import java.math.BigDecimal;                                  // money

@Entity                                                      // This becomes a table 'Player'
public class Player extends PanacheEntity {                   // id (Long) provided by PanacheEntity

    @Column(nullable = false)                                 // must have a name
    public String name;

    @Column(nullable = false, precision = 19, scale = 2)      // price (e.g., 74300000.00)
    public BigDecimal price;

    @ManyToOne(optional = false, fetch = FetchType.LAZY)      // many players belong to a single club
    @JoinColumn(name = "club_id")                             // FK column in Player table
    @JsonIgnore                                               // hide to prevent recursion when serialising JSON
    public Club club;

    @JsonProperty("clubId")                                   // expose 'clubId' in JSON while keeping 'club' ignored
    public Long jsonClubId() {
        return club == null ? null : club.id;                 // compute club id for clients
    }
}



src/main/java/com/example/transfer/dto/CreateClubRequest.java:

package com.example.transfer.dto;

import java.math.BigDecimal;               // keep money precise

public class CreateClubRequest {           // maps incoming JSON when creating a club
    public String name;                    // club name
    public BigDecimal budget;              // starting budget
}



src/main/java/com/example/transfer/dto/CreatePlayerRequest.java:

package com.example.transfer.dto;

import java.math.BigDecimal;

public class CreatePlayerRequest {         // maps incoming JSON when creating a player
    public String name;                    // player name
    public BigDecimal price;               // asking price
    public Long clubId;                    // which club owns him initially
}


src/main/java/com/example/transfer/dto/TransferRequest.java:

package com.example.transfer.dto;

public class TransferRequest {             // maps the transfer command
    public Long buyerClubId;               // club that wants to buy
    public Long playerId;                  // player being bought
}


src/main/java/com/example/transfer/dto/TransferResult.java:

package com.example.transfer.dto;

import java.math.BigDecimal;

public class TransferResult {              // a friendly response after a transfer
    public Long playerId;
    public String playerName;
    public String fromClub;
    public String toClub;
    public BigDecimal price;
    public BigDecimal buyerBudgetAfter;
    public BigDecimal sellerBudgetAfter;
}


src/main/java/com/example/transfer/ClubResource.java;

package com.example.transfer;

import com.example.transfer.dto.CreateClubRequest;                      // DTO for POST
import io.smallrye.common.annotation.Blocking;                          // mark blocking endpoints (JPA is blocking)
import jakarta.transaction.Transactional;                                // for DB writes
import jakarta.ws.rs.*;                                                  // JAX-RS annotations
import jakarta.ws.rs.core.MediaType;                                     // content types
import jakarta.ws.rs.core.Response;                                      // HTTP response wrapper
import java.math.BigDecimal;                                             // validation for budget
import java.util.List;                                                   // list for GET all
import java.util.Optional;                                               // for findByIdOptional

@Path("/clubs")                                                          // base path for club API
@Consumes(MediaType.APPLICATION_JSON)                                    // accept JSON
@Produces(MediaType.APPLICATION_JSON)                                    // return JSON
@Blocking                                                                 // ensure handled on worker thread (JPA)
public class ClubResource {

    @GET                                                                 // GET /clubs
    public List<Club> list() {                                           // list all clubs
        return Club.listAll();                                           // Panache helper -> SELECT * FROM Club
    }

    @GET
    @Path("/{id}")                                                       // GET /clubs/{id}
    public Club get(@PathParam("id") Long id) {                          // read one club
        return Club.findByIdOptional(id)                                 // returns Optional<Club>
                .orElseThrow(() -> new NotFoundException("Club not found: " + id));
    }

    @POST                                                                // POST /clubs
    @Transactional                                                       // wrap in transaction for DB write
    public Response create(CreateClubRequest req) {                      // JSON request body mapped to DTO
        if (req == null || req.name == null || req.name.isBlank())
            throw new BadRequestException("name is required");
        if (req.budget == null || req.budget.compareTo(BigDecimal.ZERO) < 0)
            throw new BadRequestException("budget must be >= 0");

        Club c = new Club();                                             // new entity
        c.name = req.name.trim();                                        // set name
        c.budget = req.budget;                                           // set budget
        c.persist();                                                     // INSERT into DB

        return Response                                                  // HTTP 201 + created entity
                .status(Response.Status.CREATED)
                .entity(c)
                .build();
    }
}



src/main/java/com/example/transfer/PlayerResource.java:

package com.example.transfer;

import com.example.transfer.dto.CreatePlayerRequest;                      // DTO for POST
import io.smallrye.common.annotation.Blocking;                           // blocking (JPA)
import jakarta.transaction.Transactional;                                 // DB write boundary
import jakarta.ws.rs.*;                                                   // JAX-RS
import jakarta.ws.rs.core.MediaType;                                      // JSON content-type
import jakarta.ws.rs.core.Response;                                       // HTTP responses
import java.math.BigDecimal;                                              // for price checks
import java.util.List;                                                    // list endpoint

@Path("/players")                                                         // base path for player API
@Consumes(MediaType.APPLICATION_JSON)
@Produces(MediaType.APPLICATION_JSON)
@Blocking
public class PlayerResource {

    @GET                                                                  // GET /players
    public List<Player> list() {
        return Player.listAll();                                          // SELECT * FROM Player
    }

    @GET
    @Path("/{id}")                                                        // GET /players/{id}
    public Player get(@PathParam("id") Long id) {
        return Player.findByIdOptional(id)
                .orElseThrow(() -> new NotFoundException("Player not found: " + id));
    }

    @POST                                                                 // POST /players
    @Transactional
    public Response create(CreatePlayerRequest req) {
        if (req == null || req.name == null || req.name.isBlank())
            throw new BadRequestException("name is required");
        if (req.price == null || req.price.compareTo(BigDecimal.ZERO) < 0)
            throw new BadRequestException("price must be >= 0");
        if (req.clubId == null)
            throw new BadRequestException("clubId is required");

        Club club = Club.findByIdOptional(req.clubId)                     // resolve owning club
                .orElseThrow(() -> new NotFoundException("clubId not found: " + req.clubId));

        Player p = new Player();                                          // new player
        p.name = req.name.trim();                                         // set fields
        p.price = req.price;
        p.club = club;                                                    // link to owner club
        p.persist();                                                      // INSERT

        return Response.status(Response.Status.CREATED).entity(p).build();// return 201
    }
}



src/main/java/com/example/transfer/TransferService.java:

package com.example.transfer;

import com.example.transfer.dto.TransferResult;                 // response DTO
import jakarta.enterprise.context.ApplicationScoped;            // CDI bean (one per app)
import jakarta.transaction.Transactional;                       // wrap transfer in a transaction
import jakarta.ws.rs.BadRequestException;                       // 400 on invalid request
import jakarta.ws.rs.NotFoundException;                         // 404 when entity missing
import java.math.BigDecimal;                                    // money operations

@ApplicationScoped                                               // managed bean
public class TransferService {

    @Transactional                                              // all DB changes happen atomically
    public TransferResult transfer(Long buyerClubId, Long playerId) {
        if (buyerClubId == null || playerId == null)
            throw new BadRequestException("buyerClubId and playerId are required");

        Club buyer = Club.findByIdOptional(buyerClubId)         // fetch buyer
                .orElseThrow(() -> new NotFoundException("Buyer club not found: " + buyerClubId));

        Player player = Player.findByIdOptional(playerId)       // fetch player
                .orElseThrow(() -> new NotFoundException("Player not found: " + playerId));

        Club seller = player.club;                              // current owner
        if (seller == null)
            throw new BadRequestException("Player has no current club");
        if (seller.id.equals(buyer.id))
            throw new BadRequestException("Buyer already owns this player");

        BigDecimal price = player.price;                        // agreed price
        if (buyer.budget.compareTo(price) < 0)                  // can buyer afford?
            throw new BadRequestException("Buyer cannot afford this player");

        // Money moves: buyer pays, seller receives
        buyer.budget = buyer.budget.subtract(price);            // deduct from buyer
        seller.budget = seller.budget.add(price);               // add to seller

        // Transfer registration
        player.club = buyer;                                    // change ownership

        // No explicit persist() needed: entities are managed in a transaction.

        // Build a friendly result payload
        TransferResult result = new TransferResult();
        result.playerId = player.id;
        result.playerName = player.name;
        result.fromClub = seller.name;
        result.toClub = buyer.name;
        result.price = price;
        result.buyerBudgetAfter = buyer.budget;
        result.sellerBudgetAfter = seller.budget;

        return result;                                          // returned as JSON by resource
    }
}



src/main/java/com/example/transfer/TransferResource.java:

package com.example.transfer;

import com.example.transfer.dto.TransferRequest;                 // input DTO
import com.example.transfer.dto.TransferResult;                  // output DTO
import io.smallrye.common.annotation.Blocking;                   // JPA is blocking
import jakarta.inject.Inject;                                    // DI for service
import jakarta.ws.rs.*;                                          // JAX-RS annotations
import jakarta.ws.rs.core.MediaType;                             // JSON
import jakarta.ws.rs.core.Response;                              // HTTP responses

@Path("/transfers")                                              // base path for transfers
@Consumes(MediaType.APPLICATION_JSON)
@Produces(MediaType.APPLICATION_JSON)
@Blocking
public class TransferResource {

    @Inject                                                      // inject our business service
    TransferService service;

    @POST                                                        // POST /transfers
    public Response transfer(TransferRequest req) {              // JSON -> DTO
        TransferResult result = service.transfer(req.buyerClubId, req.playerId);  // do it
        return Response.ok(result).build();                      // 200 with result JSON
    }
}


src/main/resources/import.sql:

-- Clubs
INSERT INTO Club(id, name, budget) VALUES (1, 'Arandale FC', 100000000.00);
INSERT INTO Club(id, name, budget) VALUES (2, 'Bristol Rovers 2.0', 45000000.00);

-- Players
INSERT INTO Player(id, name, price, club_id) VALUES (1, 'Luis Bento', 30000000.00, 1);
INSERT INTO Player(id, name, price, club_id) VALUES (2, 'Marco Silva', 60000000.00, 1);

########################################################################################


➜  transfer-market git:(main) ✗ ./gradlew quarkusDev

> Task :compileJava FAILED
/Users/arun-joy.joseph/IdeaProjects/transfer-market/src/main/java/org/acme/ClubResource.java:28: error: incompatible types: no instance(s) of type variable(s) X exist so that PanacheEntityBase conforms to Club
                .orElseThrow(() -> new NotFoundException("Club not found: " + id));
                            ^
  where X,T are type-variables:
    X extends Throwable declared in method <X>orElseThrow(Supplier<? extends X>)
    T extends Object declared in class Optional
1 error

[Incubating] Problems report is available at: file:///Users/arun-joy.joseph/IdeaProjects/transfer-market/build/reports/problems/problems-report.html

FAILURE: Build failed with an exception.

* What went wrong:
Execution failed for task ':compileJava'.
> Compilation failed; see the compiler output below.
  /Users/arun-joy.joseph/IdeaProjects/transfer-market/src/main/java/org/acme/ClubResource.java:28: error: incompatible types: no instance(s) of type variable(s) X exist so that PanacheEntityBase conforms to Club
                  .orElseThrow(() -> new NotFoundException("Club not found: " + id));
                              ^
    where X,T are type-variables:
      X extends Throwable declared in method <X>orElseThrow(Supplier<? extends X>)
      T extends Object declared in class Optional
  1 error

* Try:
> Check your code and dependencies to fix the compilation error(s)
> Run with --scan to generate a Build Scan (Powered by Develocity).

Deprecated Gradle features were used in this build, making it incompatible with Gradle 10.

You can use '--warning-mode all' to show the individual deprecation warnings and determine if they come from your own scripts or plugins.

For more on this, please refer to https://docs.gradle.org/9.1.0/userguide/command_line_interface.html#sec:command_line_warnings in the Gradle documentation.

BUILD FAILED in 2m 2s
6 actionable tasks: 1 executed, 5 up-to-date


# Create a player for Arandale FC (assume Arandale has id 1; adjust if different)
curl -s -X POST http://localhost:8080/players \
  -H 'Content-Type: application/json' \
  -d '{"name":"Luis Bento","price":30000000,"clubId":1}' | jq

# Create another player
curl -s -X POST http://localhost:8080/players \
  -H 'Content-Type: application/json' \
  -d '{"name":"Marco Silva","price":50000000,"clubId":1}' | jq

# List players (note: each JSON has "clubId" but not the nested club object)
curl -s http://localhost:8080/players | jq





# 1) Create two clubs
curl -s -X POST http://localhost:8080/clubs -H 'Content-Type: application/json' \
  -d '{"name":"Arandale FC","budget":100000000}' | jq

curl -s -X POST http://localhost:8080/clubs -H 'Content-Type: application/json' \
  -d '{"name":"Bristol Rovers 2.0","budget":45000000}' | jq

# Confirm their IDs (note them)
curl -s http://localhost:8080/clubs | jq

# Suppose Arandale id=1, Bristol id=2 (adjust if different)

# 2) Create a player owned by Arandale
curl -s -X POST http://localhost:8080/players -H 'Content-Type: application/json' \
  -d '{"name":"Luis Bento","price":30000000,"clubId":1}' | jq

# Confirm player exists
curl -s http://localhost:8080/players | jq

# 3) Attempt transfer where buyer cannot afford (try lowering Bristol’s budget first if needed)
# If Bristol has 45m, price is 30m — this WILL succeed; to test failure, try a 60m player or reduce budget.
# Let's create a pricier player for a failure case:
curl -s -X POST http://localhost:8080/players -H 'Content-Type: application/json' \
  -d '{"name":"Marco Silva","price":60000000,"clubId":1}' | jq

# Try to buy expensive player with Bristol (should fail: 400 Bad Request)
curl -i -s -X POST http://localhost:8080/transfers -H 'Content-Type: application/json' \
  -d '{"buyerClubId":2,"playerId":2}'

# 4) Now buy the 30m player (should succeed)
curl -s -X POST http://localhost:8080/transfers -H 'Content-Type: application/json' \
  -d '{"buyerClubId":2,"playerId":1}' | jq

# 5) Verify budgets changed: Bristol decreased by 30m; Arandale increased by 30m
curl -s http://localhost:8080/clubs | jq

# 6) Check player ownership moved (playerId=1 should show clubId=2 now)
curl -s http://localhost:8080/players | jq





➜  transfer-market git:(main) ✗  ./gradlew clean build
Unrecognized configuration key "quarkus.http.cors" was provided; it will be ignored; verify that the dependency extension for this configuration is set or that you did not make a typo
Unrecognized configuration key "quarkus.hibernate-orm.format-sql" was provided; it will be ignored; verify that the dependency extension for this configuration is set or that you did not make a typo
The "quarkus.hibernate-orm.database.generation" config property is deprecated and should not be used anymore.

> Task :test

GreetingResourceTest > testHelloEndpoint() FAILED
    java.lang.AssertionError at GreetingResourceTest.java:17

1 test completed, 1 failed

> Task :test FAILED

[Incubating] Problems report is available at: file:///Users/arun-joy.joseph/IdeaProjects/transfer-market/build/reports/problems/problems-report.html

FAILURE: Build failed with an exception.

* What went wrong:
Execution failed for task ':test'.
> There were failing tests. See the report at: file:///Users/arun-joy.joseph/IdeaProjects/transfer-market/build/reports/tests/test/index.html

* Try:
> Run with --scan to generate a Build Scan (Powered by Develocity).

Deprecated Gradle features were used in this build, making it incompatible with Gradle 10.

You can use '--warning-mode all' to show the individual deprecation warnings and determine if they come from your own scripts or plugins.

For more on this, please refer to https://docs.gradle.org/9.1.0/userguide/command_line_interface.html#sec:command_line_warnings in the Gradle documentation.

BUILD FAILED in 2m 18s
10 actionable tasks: 10 executed


plugins {
    id 'java'
    id 'io.quarkus'
}

repositories {
    mavenCentral()
    mavenLocal()
    maven {
        url = "https://nexus.mgmt-bld.oncp.dev/repository/maven-public/"
    }
    maven {
        url = "https://nexus.sbs-bld.oncp.dev/repository/sbs-pdt/"
    }
    maven {
        url = "https://nexus.sbs-bld.oncp.dev/repository/shared-services/"
    }
}

dependencies {
    implementation enforcedPlatform("${quarkusPlatformGroupId}:${quarkusPlatformArtifactId}:${quarkusPlatformVersion}")
//    implementation 'io.quarkus:quarkus-arc'
    implementation 'io.quarkus:quarkus-rest'

    implementation 'io.quarkus:quarkus-rest-jackson'
    implementation 'io.quarkus:quarkus-hibernate-orm-panache'
    implementation 'io.quarkus:quarkus-jdbc-h2'

    testImplementation 'io.quarkus:quarkus-junit5'
    testImplementation 'io.rest-assured:rest-assured'
}

group = 'org.acme'
version = '1.0.0-SNAPSHOT'

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

test {
    systemProperty "java.util.logging.manager", "org.jboss.logmanager.LogManager"
}
compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << '-parameters'
}

compileTestJava {
    options.encoding = 'UTF-8'
}



gradle.properties:

# Gradle properties

quarkusPluginId=io.quarkus
quarkusPluginVersion=3.28.2
quarkusPlatformGroupId=io.quarkus.platform
quarkusPlatformArtifactId=quarkus-bom
quarkusPlatformVersion=3.28.2


settings.gradle:

pluginManagement {
    repositories {
        mavenCentral()
        gradlePluginPortal()
        mavenLocal()
        maven {
            url 'https://nexus.mgmt-bld.oncp.dev/repository/maven-public/'
        }
        maven {
            url = "https://nexus.sbs-bld.oncp.dev/repository/sbs-pdt/"
        }
    }
    plugins {
        id "${quarkusPluginId}" version "${quarkusPluginVersion}"
    }
}
rootProject.name='transfer-market'


# CORS (new key name)
quarkus.http.cors.enabled=true

# Hibernate ORM — logging keys live under "log.*"
quarkus.hibernate-orm.log.sql=true
quarkus.hibernate-orm.log.format-sql=true

# Schema generation (old key is deprecated)
quarkus.hibernate-orm.schema.generation=drop-and-create

# Keep your datasource as-is
quarkus.datasource.db-kind=h2
quarkus.datasource.jdbc.url=jdbc:h2:mem:transferdb;DB_CLOSE_DELAY=-1
quarkus.datasource.username=sa
quarkus.datasource.password=sa

# Optional: seed file if you’re using it
quarkus.hibernate-orm.sql-load-script=import.sql


➜  transfer-market git:(main) ✗  ./gradlew clean build

[Incubating] Problems report is available at: file:///Users/arun-joy.joseph/IdeaProjects/transfer-market/build/reports/problems/problems-report.html

FAILURE: Build failed with an exception.

* Where:
Settings file '/Users/arun-joy.joseph/IdeaProjects/transfer-market/settings.gradle' line: 14

* What went wrong:
A problem occurred evaluating settings 'transfer-market'.
> Could not get unknown property 'quarkusPluginId' for object of type org.gradle.plugin.management.internal.DefaultPluginManagementSpec$PluginDependenciesSpecImpl.

* Try:
> Run with --stacktrace option to get the stack trace.
> Run with --info or --debug option to get more log output.
> Run with --scan to generate a Build Scan (Powered by Develocity).
> Get more help at https://help.gradle.org.

Deprecated Gradle features were used in this build, making it incompatible with Gradle 10.

You can use '--warning-mode all' to show the individual deprecation warnings and determine if they come from your own scripts or plugins.

For more on this, please refer to https://docs.gradle.org/9.1.0/userguide/command_line_interface.html#sec:command_line_warnings in the Gradle documentation.

BUILD FAILED in 289ms


➜  transfer-market git:(main) ✗ ./gradlew clean build

[Incubating] Problems report is available at: file:///Users/arun-joy.joseph/IdeaProjects/transfer-market/build/reports/problems/problems-report.html

FAILURE: Build failed with an exception.

* Where:
Build file '/Users/arun-joy.joseph/IdeaProjects/transfer-market/build.gradle' line: 21

* What went wrong:
A problem occurred evaluating root project 'transfer-market'.
> Could not get unknown property 'quarkusPlatformGroupId' for object of type org.gradle.api.internal.artifacts.dsl.dependencies.DefaultDependencyHandler.

* Try:
> Run with --stacktrace option to get the stack trace.
> Run with --info or --debug option to get more log output.
> Run with --scan to generate a Build Scan (Powered by Develocity).
> Get more help at https://help.gradle.org.

Deprecated Gradle features were used in this build, making it incompatible with Gradle 10.

You can use '--warning-mode all' to show the individual deprecation warnings and determine if they come from your own scripts or plugins.

For more on this, please refer to https://docs.gradle.org/9.1.0/userguide/command_line_interface.html#sec:command_line_warnings in the Gradle documentation.

BUILD FAILED in 16s


dependencies {
  implementation enforcedPlatform("io.quarkus.platform:quarkus-bom:3.28.2")
  implementation "io.quarkus:quarkus-rest"
  implementation "io.quarkus:quarkus-rest-jackson"
  implementation "io.quarkus:quarkus-hibernate-orm-panache"
  implementation "io.quarkus:quarkus-jdbc-h2"
  testImplementation "io.quarkus:quarkus-junit5"
  testImplementation "io.rest-assured:rest-assured"
}


build.gradle:

dependencies {
  // already present
  testImplementation "io.quarkus:quarkus-junit5"
  testImplementation "io.rest-assured:rest-assured"

  // add this for @InjectMock and PanacheMock (Mockito support)
  testImplementation "io.quarkus:quarkus-junit5-mockito"
}



src/test/java/org/acme/testsupport/Db.java:

package org.acme.testsupport;

import jakarta.transaction.Transactional;
import org.acme.Club;
import org.acme.Player;
import java.math.BigDecimal;

public final class Db {
    private Db() {}

    @Transactional
    public static void clearAll() {
        Player.deleteAll();
        Club.deleteAll();
    }

    @Transactional
    public static Club newClub(String name, String budget) {
        Club c = new Club();
        c.name = name;
        c.budget = new BigDecimal(budget);
        c.persist();
        return c;
    }

    @Transactional
    public static Player newPlayer(String name, String price, Club owner) {
        Player p = new Player();
        p.name = name;
        p.price = new BigDecimal(price);
        p.club = owner;
        p.persist();
        return p;
    }
}



src/test/java/org/acme/testsupport/ResetDatabasePerTest.java:

package org.acme.testsupport;

import io.quarkus.test.junit.QuarkusTest;
import org.junit.jupiter.api.BeforeEach;

@QuarkusTest
public abstract class ResetDatabasePerTest {
    @BeforeEach
    void wipe() {
        Db.clearAll();
    }
}





src/test/java/org/acme/api/ClubResourceApiTest.java:

package org.acme.api;

import io.quarkus.hibernate.orm.panache.PanacheMock;
import io.quarkus.test.junit.QuarkusTest;
import io.restassured.http.ContentType;
import org.acme.Club;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.math.BigDecimal;
import java.util.List;
import java.util.Optional;

import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.*;
import static org.mockito.Mockito.*;

@QuarkusTest
class ClubResourceApiTest {

    @BeforeEach
    void setupMocks() {
        PanacheMock.mock(Club.class);
        clearInvocations(Club.class);
        reset(Club.class);
    }

    @Test
    void list_returns_clubs_from_panache() {
        // arrange
        Club c = new Club();
        c.id = 1L; c.name = "Arandale FC"; c.budget = new BigDecimal("100000000");
        when(Club.listAll()).thenReturn(List.of(c));

        // act/assert
        given()
            .accept(ContentType.JSON)
        .when()
            .get("/clubs")
        .then()
            .statusCode(200)
            .body("size()", is(1))
            .body("[0].id", is(1))
            .body("[0].name", is("Arandale FC"));
    }

    @Test
    void get_by_id_404_when_missing() {
        when(Club.findByIdOptional(999L)).thenReturn(Optional.empty());

        given()
            .accept(ContentType.JSON)
        .when()
            .get("/clubs/999")
        .then()
            .statusCode(404);
    }

    @Test
    void create_valid_payload_persists_and_returns_201() {
        // we’ll just verify persist() is called on a Club instance
        doAnswer(invocation -> {
            Club c = (Club) invocation.getMock(); // not needed; Panache persist() is instance
            return null;
        }).when(Club.class);

        given()
            .contentType(ContentType.JSON)
            .body("""
                  { "name": "Arandale FC", "budget": 100000000 }
                  """)
        .when()
            .post("/clubs")
        .then()
            .statusCode(201)
            .contentType(ContentType.JSON)
            .body("name", is("Arandale FC"))
            .body("budget", is(100000000));
        // (We don't assert DB state here — mocked test only checks API behavior.)
    }
}



src/test/java/org/acme/api/PlayerResourceApiTest.java:

package org.acme.api;

import io.quarkus.hibernate.orm.panache.PanacheMock;
import io.quarkus.test.junit.QuarkusTest;
import io.restassured.http.ContentType;
import org.acme.Club;
import org.acme.Player;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.math.BigDecimal;
import java.util.List;
import java.util.Optional;

import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.*;
import static org.mockito.Mockito.*;

@QuarkusTest
class PlayerResourceApiTest {

    @BeforeEach
    void setupMocks() {
        PanacheMock.mock(Player.class);
        PanacheMock.mock(Club.class);
        reset(Player.class, Club.class);
    }

    @Test
    void list_players_uses_panache_listAll() {
        Player p = new Player();
        p.id = 10L; p.name = "Luis Bento"; p.price = new BigDecimal("30000000");
        Club c = new Club(); c.id = 1L; p.club = c;

        when(Player.listAll()).thenReturn(List.of(p));

        given()
            .accept(ContentType.JSON)
        .when()
            .get("/players")
        .then()
            .statusCode(200)
            .body("size()", is(1))
            .body("[0].id", is(10))
            .body("[0].name", is("Luis Bento"))
            .body("[0].clubId", is(1));
    }

    @Test
    void get_player_404_when_missing() {
        when(Player.findByIdOptional(123L)).thenReturn(Optional.empty());

        given()
            .accept(ContentType.JSON)
        .when()
            .get("/players/123")
        .then()
            .statusCode(404);
    }

    @Test
    void create_player_validates_clubId() {
        // club lookup fails
        when(Club.findByIdOptional(99L)).thenReturn(Optional.empty());

        given()
            .contentType(ContentType.JSON)
            .body("""
                  {"name":"Ghost","price":1000,"clubId":99}
                  """)
        .when()
            .post("/players")
        .then()
            .statusCode(anyOf(is(404), is(400)));
    }
}




src/test/java/org/acme/api/TransferResourceApiTest.java:

package org.acme.api;

import io.quarkus.test.junit.QuarkusTest;
import io.quarkus.test.junit.mockito.InjectMock;
import io.restassured.http.ContentType;
import org.acme.dto.TransferResult;
import org.acme.TransferService;
import org.junit.jupiter.api.Test;

import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.*;
import static org.mockito.ArgumentMatchers.anyLong;
import static org.mockito.Mockito.when;

@QuarkusTest
class TransferResourceApiTest {

    @InjectMock
    TransferService service; // Quarkus will replace the real bean with this mock

    @Test
    void transfer_endpoint_returns_service_result() {
        TransferResult r = new TransferResult();
        r.playerId = 1L; r.playerName = "Luis Bento";
        r.fromClub = "Arandale FC"; r.toClub = "Bristol Rovers 2.0";
        r.price = new java.math.BigDecimal("30000000");
        r.buyerBudgetAfter = new java.math.BigDecimal("15000000");
        r.sellerBudgetAfter = new java.math.BigDecimal("130000000");

        when(service.transfer(anyLong(), anyLong())).thenReturn(r);

        given()
            .contentType(ContentType.JSON)
            .body("""
                  { "buyerClubId": 2, "playerId": 1 }
                  """)
        .when()
            .post("/transfers")
        .then()
            .statusCode(200)
            .contentType(ContentType.JSON)
            .body("playerId", is(1))
            .body("playerName", is("Luis Bento"))
            .body("toClub", is("Bristol Rovers 2.0"));
    }
}





src/test/java/org/acme/service/TransferServiceTest.java:

package org.acme.service;

import io.quarkus.test.junit.QuarkusTest;
import jakarta.inject.Inject;
import jakarta.ws.rs.BadRequestException;
import jakarta.ws.rs.NotFoundException;
import org.acme.Club;
import org.acme.Player;
import org.acme.TransferService;
import org.acme.testsupport.Db;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.math.BigDecimal;

import static org.junit.jupiter.api.Assertions.*;

@QuarkusTest
class TransferServiceTest {

    @Inject
    TransferService service;

    @BeforeEach
    void reset() {
        Db.clearAll();
    }

    @Test
    void success_moves_ownership_and_updates_budgets() {
        Club seller = Db.newClub("Arandale FC", "100000000");
        Club buyer  = Db.newClub("Bristol Rovers 2.0", "45000000");
        Player p    = Db.newPlayer("Luis Bento", "30000000", seller);

        var result = service.transfer(buyer.id, p.id);

        assertEquals("Arandale FC", result.fromClub);
        assertEquals("Bristol Rovers 2.0", result.toClub);
        assertEquals(new BigDecimal("30000000"), result.price);
        assertEquals(new BigDecimal("15000000"), result.buyerBudgetAfter);
        assertEquals(new BigDecimal("130000000"), result.sellerBudgetAfter);

        // Verify persisted side-effects
        Player reloaded = Player.findById(p.id);
        assertEquals(buyer.id, reloaded.club.id);

        Club reBuyer  = Club.findById(buyer.id);
        Club reSeller = Club.findById(seller.id);
        assertEquals(new BigDecimal("15000000"), reBuyer.budget);
        assertEquals(new BigDecimal("130000000"), reSeller.budget);
    }

    @Test
    void fails_when_buyer_cannot_afford() {
        Club seller = Db.newClub("Seller FC", "90000000");
        Club buyer  = Db.newClub("Buyer FC",  "1000000");
        Player p    = Db.newPlayer("Expensive", "60000000", seller);

        var ex = assertThrows(BadRequestException.class,
                () -> service.transfer(buyer.id, p.id));
        assertTrue(ex.getMessage().toLowerCase().contains("afford"));
    }

    @Test
    void fails_when_buyer_already_owner() {
        Club club = Db.newClub("Solo FC", "50000000");
        Player p  = Db.newPlayer("My Guy", "1000000", club);

        assertThrows(BadRequestException.class, () -> service.transfer(club.id, p.id));
    }

    @Test
    void fails_when_entities_missing() {
        assertThrows(NotFoundException.class, () -> service.transfer(999L, 1L));
        assertThrows(NotFoundException.class, () -> service.transfer(1L, 999L));
    }
}





src/test/java/org/acme/e2e/TransferE2eTest.java:

package org.acme.e2e;

import io.restassured.http.ContentType;
import org.acme.testsupport.ResetDatabasePerTest;
import org.junit.jupiter.api.Test;

import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.*;

public class TransferE2eTest extends ResetDatabasePerTest {

    @Test
    void end_to_end_transfer_flow() {
        // create two clubs
        int sellerId =
        given().contentType(ContentType.JSON)
               .body("""{"name":"Arandale FC","budget":100000000}""")
        .when().post("/clubs")
        .then().statusCode(201).extract().path("id");

        int buyerId =
        given().contentType(ContentType.JSON)
               .body("""{"name":"Bristol Rovers 2.0","budget":45000000}""")
        .when().post("/clubs")
        .then().statusCode(201).extract().path("id");

        // create player
        int playerId =
        given().contentType(ContentType.JSON)
               .body("""{"name":"Luis Bento","price":30000000,"clubId":%d}""".formatted(sellerId))
        .when().post("/players")
        .then().statusCode(201).extract().path("id");

        // do transfer
        given().contentType(ContentType.JSON)
               .body("""{"buyerClubId":%d,"playerId":%d}""".formatted(buyerId, playerId))
        .when().post("/transfers")
        .then().statusCode(200)
               .body("toClub", is("Bristol Rovers 2.0"));

        // verify ownership moved
        given().accept(ContentType.JSON)
        .when().get("/players/{id}", playerId)
        .then().statusCode(200)
               .body("clubId", is(buyerId));
    }
}




How to run

All tests: ./gradlew clean test

Just service tests (by package filter):
./gradlew test --tests "org.acme.service.*"

Just mocked API tests:
./gradlew test --tests "org.acme.api.*"

Just E2E:
./gradlew test --tests "org.acme.e2e.*"



➜  transfer-market git:(main) ✗ ./gradlew clean build --refresh-dependencies
Starting a Gradle Daemon (subsequent builds will be faster)

> Task :compileTestJava FAILED
/Users/arun-joy.joseph/IdeaProjects/transfer-market/src/test/java/org/acme/api/TransferResourceApiTest.java:4: error: cannot find symbol
import io.quarkus.test.junit.mockito.InjectMock;
                                    ^
  symbol:   class InjectMock
  location: package io.quarkus.test.junit.mockito
/Users/arun-joy.joseph/IdeaProjects/transfer-market/src/test/java/org/acme/api/ClubResourceApiTest.java:3: error: cannot find symbol
import io.quarkus.hibernate.orm.panache.PanacheMock;
                                       ^
  symbol:   class PanacheMock
  location: package io.quarkus.hibernate.orm.panache
/Users/arun-joy.joseph/IdeaProjects/transfer-market/src/test/java/org/acme/api/PlayerResourceApiTest.java:3: error: cannot find symbol
import io.quarkus.hibernate.orm.panache.PanacheMock;
                                       ^
  symbol:   class PanacheMock
  location: package io.quarkus.hibernate.orm.panache
/Users/arun-joy.joseph/IdeaProjects/transfer-market/src/test/java/org/acme/api/TransferResourceApiTest.java:18: error: cannot find symbol
    @InjectMock
     ^
  symbol:   class InjectMock
  location: class TransferResourceApiTest
/Users/arun-joy.joseph/IdeaProjects/transfer-market/src/test/java/org/acme/api/ClubResourceApiTest.java:23: error: cannot find symbol
        PanacheMock.mock(Club.class);
        ^
  symbol:   variable PanacheMock
  location: class ClubResourceApiTest
/Users/arun-joy.joseph/IdeaProjects/transfer-market/src/test/java/org/acme/api/PlayerResourceApiTest.java:24: error: cannot find symbol
        PanacheMock.mock(Player.class);
        ^
  symbol:   variable PanacheMock
  location: class PlayerResourceApiTest
/Users/arun-joy.joseph/IdeaProjects/transfer-market/src/test/java/org/acme/api/PlayerResourceApiTest.java:25: error: cannot find symbol
        PanacheMock.mock(Club.class);
        ^
  symbol:   variable PanacheMock
  location: class PlayerResourceApiTest
Note: Some input files use unchecked or unsafe operations.
Note: Recompile with -Xlint:unchecked for details.
7 errors

[Incubating] Problems report is available at: file:///Users/arun-joy.joseph/IdeaProjects/transfer-market/build/reports/problems/problems-report.html

FAILURE: Build failed with an exception.

* What went wrong:
Execution failed for task ':compileTestJava'.
> Compilation failed; see the compiler output below.
  /Users/arun-joy.joseph/IdeaProjects/transfer-market/src/test/java/org/acme/api/TransferResourceApiTest.java:4: error: cannot find symbol
  import io.quarkus.test.junit.mockito.InjectMock;
                                      ^
    symbol:   class InjectMock
    location: package io.quarkus.test.junit.mockito
  /Users/arun-joy.joseph/IdeaProjects/transfer-market/src/test/java/org/acme/api/ClubResourceApiTest.java:3: error: cannot find symbol
  import io.quarkus.hibernate.orm.panache.PanacheMock;
                                         ^
    symbol:   class PanacheMock
    location: package io.quarkus.hibernate.orm.panache
  /Users/arun-joy.joseph/IdeaProjects/transfer-market/src/test/java/org/acme/api/PlayerResourceApiTest.java:3: error: cannot find symbol
  import io.quarkus.hibernate.orm.panache.PanacheMock;
                                         ^
    symbol:   class PanacheMock
    location: package io.quarkus.hibernate.orm.panache
  /Users/arun-joy.joseph/IdeaProjects/transfer-market/src/test/java/org/acme/api/TransferResourceApiTest.java:18: error: cannot find symbol
      @InjectMock
       ^
    symbol:   class InjectMock
    location: class TransferResourceApiTest
  /Users/arun-joy.joseph/IdeaProjects/transfer-market/src/test/java/org/acme/api/ClubResourceApiTest.java:23: error: cannot find symbol
          PanacheMock.mock(Club.class);
          ^
    symbol:   variable PanacheMock
    location: class ClubResourceApiTest
  /Users/arun-joy.joseph/IdeaProjects/transfer-market/src/test/java/org/acme/api/PlayerResourceApiTest.java:24: error: cannot find symbol
          PanacheMock.mock(Player.class);
          ^
    symbol:   variable PanacheMock
    location: class PlayerResourceApiTest
  /Users/arun-joy.joseph/IdeaProjects/transfer-market/src/test/java/org/acme/api/PlayerResourceApiTest.java:25: error: cannot find symbol
          PanacheMock.mock(Club.class);
          ^
    symbol:   variable PanacheMock
    location: class PlayerResourceApiTest
  Note: Recompile with -Xlint:unchecked for details.
  Note: Some input files use unchecked or unsafe operations.
  7 errors

* Try:
> Check your code and dependencies to fix the compilation error(s)
> Run with --scan to generate a Build Scan (Powered by Develocity).

Deprecated Gradle features were used in this build, making it incompatible with Gradle 10.

You can use '--warning-mode all' to show the individual deprecation warnings and determine if they come from your own scripts or plugins.

For more on this, please refer to https://docs.gradle.org/9.1.0/userguide/command_line_interface.html#sec:command_line_warnings in the Gradle documentation.

BUILD FAILED in 3m 50s
9 actionable tasks: 9 executed


➜  transfer-market git:(main) ✗ ./gradlew clean test --refresh-dependencies
Starting a Gradle Daemon, 1 busy and 1 stopped Daemons could not be reused, use --status for details

> Task :compileTestJava
/Users/arun-joy.joseph/IdeaProjects/transfer-market/src/test/java/org/acme/api/TransferResourceApiTest.java:4: error: cannot find symbol
import io.quarkus.test.junit.mockito.InjectMock;
                                    ^
  symbol:   class InjectMock
  location: package io.quarkus.test.junit.mockito
/Users/arun-joy.joseph/IdeaProjects/transfer-market/src/test/java/org/acme/api/TransferResourceApiTest.java:18: error: cannot find symbol
    @InjectMock
     ^
  symbol:   class InjectMock
  location: class TransferResourceApiTest
Note: Some input files use unchecked or unsafe operations.
Note: Recompile with -Xlint:unchecked for details.
2 errors

> Task :compileTestJava FAILED

[Incubating] Problems report is available at: file:///Users/arun-joy.joseph/IdeaProjects/transfer-market/build/reports/problems/problems-report.html

FAILURE: Build failed with an exception.

* What went wrong:
Execution failed for task ':compileTestJava'.
> Compilation failed; see the compiler output below.
  /Users/arun-joy.joseph/IdeaProjects/transfer-market/src/test/java/org/acme/api/TransferResourceApiTest.java:4: error: cannot find symbol
  import io.quarkus.test.junit.mockito.InjectMock;
                                      ^
    symbol:   class InjectMock
    location: package io.quarkus.test.junit.mockito
  /Users/arun-joy.joseph/IdeaProjects/transfer-market/src/test/java/org/acme/api/TransferResourceApiTest.java:18: error: cannot find symbol
      @InjectMock
       ^
    symbol:   class InjectMock
    location: class TransferResourceApiTest
  Note: Recompile with -Xlint:unchecked for details.
  Note: Some input files use unchecked or unsafe operations.
  2 errors

* Try:
> Check your code and dependencies to fix the compilation error(s)
> Run with --scan to generate a Build Scan (Powered by Develocity).

Deprecated Gradle features were used in this build, making it incompatible with Gradle 10.

You can use '--warning-mode all' to show the individual deprecation warnings and determine if they come from your own scripts or plugins.

For more on this, please refer to https://docs.gradle.org/9.1.0/userguide/command_line_interface.html#sec:command_line_warnings in the Gradle documentation.

BUILD FAILED in 3m 20s
8 actionable tasks: 8 executed


src/test/java/org/acme/api/TransferResourceApiTest.java:


package org.acme.api;

import io.quarkus.test.junit.QuarkusTest;
import io.quarkus.test.junit.QuarkusMock;
import io.restassured.http.ContentType;
import org.acme.TransferService;
import org.acme.dto.TransferResult;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.is;
import static org.mockito.ArgumentMatchers.anyLong;
import static org.mockito.Mockito.when;

@QuarkusTest
class TransferResourceApiTest {

    @BeforeEach
    void registerMock() {
        // Create a Mockito mock and install it as the CDI bean
        TransferService mock = Mockito.mock(TransferService.class);

        TransferResult r = new TransferResult();
        r.playerId = 1L; r.playerName = "Luis Bento";
        r.fromClub = "Arandale FC"; r.toClub = "Bristol Rovers 2.0";
        r.price = new java.math.BigDecimal("30000000");
        r.buyerBudgetAfter = new java.math.BigDecimal("15000000");
        r.sellerBudgetAfter = new java.math.BigDecimal("130000000");

        when(mock.transfer(anyLong(), anyLong())).thenReturn(r);

        // This line tells Quarkus: use `mock` whenever TransferService is injected
        QuarkusMock.installMockForType(mock, TransferService.class);
    }

    @Test
    void transfer_endpoint_returns_service_result() {
        given()
            .contentType(ContentType.JSON)
            .body("""
                  { "buyerClubId": 2, "playerId": 1 }
                  """)
        .when()
            .post("/transfers")
        .then()
            .statusCode(200)
            .contentType(ContentType.JSON)
            .body("playerId", is(1))
            .body("playerName", is("Luis Bento"))
            .body("toClub", is("Bristol Rovers 2.0"));
    }
}


➜  transfer-market git:(main) ✗ ./gradlew clean test --refresh-dependencies
Starting a Gradle Daemon, 2 stopped Daemons could not be reused, use --status for details

> Task :compileTestJava
Note: Some input files use unchecked or unsafe operations.
Note: Recompile with -Xlint:unchecked for details.
Unrecognized configuration key "quarkus.http.cors" was provided; it will be ignored; verify that the dependency extension for this configuration is set or that you did not make a typo
Unrecognized configuration key "quarkus.hibernate-orm.format-sql" was provided; it will be ignored; verify that the dependency extension for this configuration is set or that you did not make a typo
The "quarkus.hibernate-orm.database.generation" config property is deprecated and should not be used anymore.
OpenJDK 64-Bit Server VM warning: Sharing is only supported for boot loader classes because bootstrap classpath has been appended

> Task :test

ClubResourceApiTest > create_valid_payload_persists_and_returns_201() FAILED
    org.mockito.exceptions.misusing.NotAMockException at ClubResourceApiTest.java:25

ClubResourceApiTest > get_by_id_404_when_missing() FAILED
    org.mockito.exceptions.misusing.NotAMockException at ClubResourceApiTest.java:25

ClubResourceApiTest > list_returns_clubs_from_panache() FAILED
    org.mockito.exceptions.misusing.NotAMockException at ClubResourceApiTest.java:25

PlayerResourceApiTest > create_player_validates_clubId() FAILED
    org.mockito.exceptions.misusing.NotAMockException at PlayerResourceApiTest.java:27

PlayerResourceApiTest > list_players_uses_panache_listAll() FAILED
    org.mockito.exceptions.misusing.NotAMockException at PlayerResourceApiTest.java:27

PlayerResourceApiTest > get_player_404_when_missing() FAILED
    org.mockito.exceptions.misusing.NotAMockException at PlayerResourceApiTest.java:27

TransferServiceTest > success_moves_ownership_and_updates_budgets() FAILED
    org.opentest4j.AssertionFailedError at TransferServiceTest.java:39

12 tests completed, 7 failed

> Task :test FAILED

[Incubating] Problems report is available at: file:///Users/arun-joy.joseph/IdeaProjects/transfer-market/build/reports/problems/problems-report.html

FAILURE: Build failed with an exception.

* What went wrong:
Execution failed for task ':test'.
> There were failing tests. See the report at: file:///Users/arun-joy.joseph/IdeaProjects/transfer-market/build/reports/tests/test/index.html

* Try:
> Run with --scan to generate a Build Scan (Powered by Develocity).

Deprecated Gradle features were used in this build, making it incompatible with Gradle 10.

You can use '--warning-mode all' to show the individual deprecation warnings and determine if they come from your own scripts or plugins.

For more on this, please refer to https://docs.gradle.org/9.1.0/userguide/command_line_interface.html#sec:command_line_warnings in the Gradle documentation.

BUILD FAILED in 3m 21s
9 actionable tasks: 9 executed


src/test/java/org/acme/api/ClubResourceApiTest.java:

package org.acme.api;

import io.quarkus.panache.mock.PanacheMock;
import io.quarkus.test.junit.QuarkusTest;
import io.restassured.http.ContentType;
import org.acme.Club;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.math.BigDecimal;
import java.util.List;
import java.util.Optional;

import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.*;
import static org.mockito.Mockito.when;

@QuarkusTest
class ClubResourceApiTest {

    @BeforeEach
    void setupMocks() {
        PanacheMock.mock(Club.class);      // ✅ mock Panache
        // ❌ DO NOT call Mockito.reset/clearInvocations on Club.class
    }

    @AfterEach
    void tearDownMocks() {
        PanacheMock.unmock(Club.class);    // optional but keeps isolation clean
    }

    @Test
    void list_returns_clubs_from_panache() {
        Club c = new Club();
        c.id = 1L; c.name = "Arandale FC"; c.budget = new BigDecimal("100000000");
        when(Club.listAll()).thenReturn(List.of(c));

        given().accept(ContentType.JSON)
        .when().get("/clubs")
        .then().statusCode(200)
               .body("size()", is(1))
               .body("[0].id", is(1))
               .body("[0].name", is("Arandale FC"));
    }

    @Test
    void get_by_id_404_when_missing() {
        when(Club.findByIdOptional(999L)).thenReturn(Optional.empty());

        given().accept(ContentType.JSON)
        .when().get("/clubs/999")
        .then().statusCode(404);
    }

    @Test
    void create_valid_payload_persists_and_returns_201() {
        // We let persist() hit the real in-memory DB (fine in @QuarkusTest)
        given().contentType(ContentType.JSON)
               .body("""{ "name": "Arandale FC", "budget": 100000000 }""")
        .when().post("/clubs")
        .then().statusCode(201)
               .contentType(ContentType.JSON)
               .body("name", is("Arandale FC"))
               .body("budget", is(100000000));
    }
}



src/test/java/org/acme/api/PlayerResourceApiTest.java:

package org.acme.api;

import io.quarkus.panache.mock.PanacheMock;
import io.quarkus.test.junit.QuarkusTest;
import io.restassured.http.ContentType;
import org.acme.Club;
import org.acme.Player;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.math.BigDecimal;
import java.util.List;
import java.util.Optional;

import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.*;
import static org.mockito.Mockito.when;

@QuarkusTest
class PlayerResourceApiTest {

    @BeforeEach
    void setupMocks() {
        PanacheMock.mock(Player.class);    // ✅
        PanacheMock.mock(Club.class);      // ✅
    }

    @AfterEach
    void tearDownMocks() {
        PanacheMock.unmock(Player.class);
        PanacheMock.unmock(Club.class);
    }

    @Test
    void list_players_uses_panache_listAll() {
        Player p = new Player();
        p.id = 10L; p.name = "Luis Bento"; p.price = new BigDecimal("30000000");
        Club c = new Club(); c.id = 1L; p.club = c;

        when(Player.listAll()).thenReturn(List.of(p));

        given().accept(ContentType.JSON)
        .when().get("/players")
        .then().statusCode(200)
               .body("size()", is(1))
               .body("[0].id", is(10))
               .body("[0].name", is("Luis Bento"))
               .body("[0].clubId", is(1));
    }

    @Test
    void get_player_404_when_missing() {
        when(Player.findByIdOptional(123L)).thenReturn(Optional.empty());

        given().accept(ContentType.JSON)
        .when().get("/players/123")
        .then().statusCode(404);
    }

    @Test
    void create_player_with_unknown_club_fails() {
        when(Club.findByIdOptional(99L)).thenReturn(Optional.empty());

        given().contentType(ContentType.JSON)
               .body("""{"name":"Ghost","price":1000,"clubId":99}""")
        .when().post("/players")
        .then().statusCode(anyOf(is(404), is(400)));
    }
}




src/test/java/org/acme/service/TransferServiceTest.java:

// ... imports as you have ...
import static org.junit.jupiter.api.Assertions.*;

@QuarkusTest
class TransferServiceTest {

    // ... @Inject, @BeforeEach same as before ...

    private static void assertBigDecimalEquals(String expected, BigDecimal actual) {
        assertEquals(0, actual.compareTo(new BigDecimal(expected)),
            () -> "Expected " + expected + " but was " + actual);
    }

    @Test
    void success_moves_ownership_and_updates_budgets() {
        Club seller = Db.newClub("Arandale FC", "100000000");
        Club buyer  = Db.newClub("Bristol Rovers 2.0", "45000000");
        Player p    = Db.newPlayer("Luis Bento", "30000000", seller);

        var result = service.transfer(buyer.id, p.id);

        assertEquals("Arandale FC", result.fromClub);
        assertEquals("Bristol Rovers 2.0", result.toClub);
        assertBigDecimalEquals("30000000.00", result.price);
        assertBigDecimalEquals("15000000.00", result.buyerBudgetAfter);
        assertBigDecimalEquals("130000000.00", result.sellerBudgetAfter);

        Player reloaded = Player.findById(p.id);
        assertEquals(buyer.id, reloaded.club.id);

        Club reBuyer  = Club.findById(buyer.id);
        Club reSeller = Club.findById(seller.id);
        assertBigDecimalEquals("15000000.00", reBuyer.budget);
        assertBigDecimalEquals("130000000.00", reSeller.budget);
    }

    // other tests unchanged
}


➜  transfer-market git:(main) ✗ ./gradlew clean test --refresh-dependencies
Starting a Gradle Daemon, 3 stopped Daemons could not be reused, use --status for details

> Task :compileTestJava FAILED
/Users/arun-joy.joseph/IdeaProjects/transfer-market/src/test/java/org/acme/api/ClubResourceApiTest.java:60: error: illegal text block open delimiter sequence, missing line terminator
                .body("""{ "name": "Arandale FC", "budget": 100000000 }""")
                         ^
/Users/arun-joy.joseph/IdeaProjects/transfer-market/src/test/java/org/acme/api/ClubResourceApiTest.java:60: error: not a statement
                .body("""{ "name": "Arandale FC", "budget": 100000000 }""")
                           ^
/Users/arun-joy.joseph/IdeaProjects/transfer-market/src/test/java/org/acme/api/ClubResourceApiTest.java:60: error: ';' expected
                .body("""{ "name": "Arandale FC", "budget": 100000000 }""")
                                 ^
/Users/arun-joy.joseph/IdeaProjects/transfer-market/src/test/java/org/acme/api/ClubResourceApiTest.java:60: error: illegal text block open delimiter sequence, missing line terminator
                .body("""{ "name": "Arandale FC", "budget": 100000000 }""")
                                                                          ^
/Users/arun-joy.joseph/IdeaProjects/transfer-market/src/test/java/org/acme/api/PlayerResourceApiTest.java:66: error: illegal text block open delimiter sequence, missing line terminator
                .body("""{"name":"Ghost","price":1000,"clubId":99}""")
                         ^
/Users/arun-joy.joseph/IdeaProjects/transfer-market/src/test/java/org/acme/api/PlayerResourceApiTest.java:66: error: not a statement
                .body("""{"name":"Ghost","price":1000,"clubId":99}""")
                          ^
/Users/arun-joy.joseph/IdeaProjects/transfer-market/src/test/java/org/acme/api/PlayerResourceApiTest.java:66: error: ';' expected
                .body("""{"name":"Ghost","price":1000,"clubId":99}""")
                                ^
/Users/arun-joy.joseph/IdeaProjects/transfer-market/src/test/java/org/acme/api/PlayerResourceApiTest.java:66: error: illegal text block open delimiter sequence, missing line terminator
                .body("""{"name":"Ghost","price":1000,"clubId":99}""")
                                                                     ^
8 errors

[Incubating] Problems report is available at: file:///Users/arun-joy.joseph/IdeaProjects/transfer-market/build/reports/problems/problems-report.html

FAILURE: Build failed with an exception.

* What went wrong:
Execution failed for task ':compileTestJava'.
> Compilation failed; see the compiler output below.
  /Users/arun-joy.joseph/IdeaProjects/transfer-market/src/test/java/org/acme/api/ClubResourceApiTest.java:60: error: not a statement
                  .body("""{ "name": "Arandale FC", "budget": 100000000 }""")
                             ^
  /Users/arun-joy.joseph/IdeaProjects/transfer-market/src/test/java/org/acme/api/PlayerResourceApiTest.java:66: error: not a statement
                  .body("""{"name":"Ghost","price":1000,"clubId":99}""")
                            ^
  /Users/arun-joy.joseph/IdeaProjects/transfer-market/src/test/java/org/acme/api/ClubResourceApiTest.java:60: error: ';' expected
                  .body("""{ "name": "Arandale FC", "budget": 100000000 }""")
                                   ^
  /Users/arun-joy.joseph/IdeaProjects/transfer-market/src/test/java/org/acme/api/PlayerResourceApiTest.java:66: error: ';' expected
                  .body("""{"name":"Ghost","price":1000,"clubId":99}""")
                                  ^
  /Users/arun-joy.joseph/IdeaProjects/transfer-market/src/test/java/org/acme/api/ClubResourceApiTest.java:60: error: illegal text block open delimiter sequence, missing line terminator
                  .body("""{ "name": "Arandale FC", "budget": 100000000 }""")
                           ^
  /Users/arun-joy.joseph/IdeaProjects/transfer-market/src/test/java/org/acme/api/ClubResourceApiTest.java:60: error: illegal text block open delimiter sequence, missing line terminator
                  .body("""{ "name": "Arandale FC", "budget": 100000000 }""")
                                                                            ^
  /Users/arun-joy.joseph/IdeaProjects/transfer-market/src/test/java/org/acme/api/PlayerResourceApiTest.java:66: error: illegal text block open delimiter sequence, missing line terminator
                  .body("""{"name":"Ghost","price":1000,"clubId":99}""")
                           ^
  /Users/arun-joy.joseph/IdeaProjects/transfer-market/src/test/java/org/acme/api/PlayerResourceApiTest.java:66: error: illegal text block open delimiter sequence, missing line terminator
                  .body("""{"name":"Ghost","price":1000,"clubId":99}""")
                                                                       ^
  8 errors

* Try:
> Check your code and dependencies to fix the compilation error(s)
> Run with --scan to generate a Build Scan (Powered by Develocity).

Deprecated Gradle features were used in this build, making it incompatible with Gradle 10.

You can use '--warning-mode all' to show the individual deprecation warnings and determine if they come from your own scripts or plugins.

For more on this, please refer to https://docs.gradle.org/9.1.0/userguide/command_line_interface.html#sec:command_line_warnings in the Gradle documentation.

BUILD FAILED in 3m 22s
8 actionable tasks: 8 executed