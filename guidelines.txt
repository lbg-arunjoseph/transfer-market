src/main/resources/application.properties

# --- Database: H2 in-memory. Creates a fresh DB per run (useful for learning/testing)
quarkus.datasource.db-kind=h2
quarkus.datasource.jdbc.url=jdbc:h2:mem:transferdb;DB_CLOSE_DELAY=-1
quarkus.datasource.username=sa
quarkus.datasource.password=sa

# --- Hibernate ORM: auto-create schema each run (drop-and-create is great for a tutorial)
quarkus.hibernate-orm.database.generation=drop-and-create
quarkus.hibernate-orm.log.sql=true
quarkus.hibernate-orm.format-sql=true

# --- HTTP server bits
quarkus.http.port=8080
quarkus.http.cors=true




src/main/java/com/example/transfer/Club.java

package com.example.transfer;                                // package groups related classes

import io.quarkus.hibernate.orm.panache.PanacheEntity;       // Panache base entity (id + helpers)
import jakarta.persistence.*;                                // JPA annotations
import java.math.BigDecimal;                                 // precise money type
import java.util.List;                                       // list for players

@Entity                                                      // Marks this as a JPA entity (mapped to a table)
public class Club extends PanacheEntity {                    // Extends PanacheEntity => gets a Long id and helpers

    @Column(nullable = false, unique = true)                 // name must be present and unique across clubs
    public String name;

    @Column(nullable = false, precision = 19, scale = 2)     // money as DECIMAL(19,2)
    public BigDecimal budget;

    @OneToMany(mappedBy = "club",                            // players reference their club; 'club' is the owner side
               cascade = CascadeType.ALL,                    // propagate saves/deletes to players
               orphanRemoval = true)                         // remove players if they’re de-linked (not used here, but safe)
    public List<Player> players;                             // list of players for this club
}


src/main/java/com/example/transfer/Player.java

package com.example.transfer;

import com.fasterxml.jackson.annotation.JsonIgnore;           // to avoid infinite JSON loops with bidirectional links
import com.fasterxml.jackson.annotation.JsonProperty;         // to expose computed fields
import io.quarkus.hibernate.orm.panache.PanacheEntity;        // Panache base
import jakarta.persistence.*;                                 // JPA
import java.math.BigDecimal;                                  // money

@Entity                                                      // This becomes a table 'Player'
public class Player extends PanacheEntity {                   // id (Long) provided by PanacheEntity

    @Column(nullable = false)                                 // must have a name
    public String name;

    @Column(nullable = false, precision = 19, scale = 2)      // price (e.g., 74300000.00)
    public BigDecimal price;

    @ManyToOne(optional = false, fetch = FetchType.LAZY)      // many players belong to a single club
    @JoinColumn(name = "club_id")                             // FK column in Player table
    @JsonIgnore                                               // hide to prevent recursion when serialising JSON
    public Club club;

    @JsonProperty("clubId")                                   // expose 'clubId' in JSON while keeping 'club' ignored
    public Long jsonClubId() {
        return club == null ? null : club.id;                 // compute club id for clients
    }
}



src/main/java/com/example/transfer/dto/CreateClubRequest.java:

package com.example.transfer.dto;

import java.math.BigDecimal;               // keep money precise

public class CreateClubRequest {           // maps incoming JSON when creating a club
    public String name;                    // club name
    public BigDecimal budget;              // starting budget
}



src/main/java/com/example/transfer/dto/CreatePlayerRequest.java:

package com.example.transfer.dto;

import java.math.BigDecimal;

public class CreatePlayerRequest {         // maps incoming JSON when creating a player
    public String name;                    // player name
    public BigDecimal price;               // asking price
    public Long clubId;                    // which club owns him initially
}


src/main/java/com/example/transfer/dto/TransferRequest.java:

package com.example.transfer.dto;

public class TransferRequest {             // maps the transfer command
    public Long buyerClubId;               // club that wants to buy
    public Long playerId;                  // player being bought
}


src/main/java/com/example/transfer/dto/TransferResult.java:

package com.example.transfer.dto;

import java.math.BigDecimal;

public class TransferResult {              // a friendly response after a transfer
    public Long playerId;
    public String playerName;
    public String fromClub;
    public String toClub;
    public BigDecimal price;
    public BigDecimal buyerBudgetAfter;
    public BigDecimal sellerBudgetAfter;
}


src/main/java/com/example/transfer/ClubResource.java;

package com.example.transfer;

import com.example.transfer.dto.CreateClubRequest;                      // DTO for POST
import io.smallrye.common.annotation.Blocking;                          // mark blocking endpoints (JPA is blocking)
import jakarta.transaction.Transactional;                                // for DB writes
import jakarta.ws.rs.*;                                                  // JAX-RS annotations
import jakarta.ws.rs.core.MediaType;                                     // content types
import jakarta.ws.rs.core.Response;                                      // HTTP response wrapper
import java.math.BigDecimal;                                             // validation for budget
import java.util.List;                                                   // list for GET all
import java.util.Optional;                                               // for findByIdOptional

@Path("/clubs")                                                          // base path for club API
@Consumes(MediaType.APPLICATION_JSON)                                    // accept JSON
@Produces(MediaType.APPLICATION_JSON)                                    // return JSON
@Blocking                                                                 // ensure handled on worker thread (JPA)
public class ClubResource {

    @GET                                                                 // GET /clubs
    public List<Club> list() {                                           // list all clubs
        return Club.listAll();                                           // Panache helper -> SELECT * FROM Club
    }

    @GET
    @Path("/{id}")                                                       // GET /clubs/{id}
    public Club get(@PathParam("id") Long id) {                          // read one club
        return Club.findByIdOptional(id)                                 // returns Optional<Club>
                .orElseThrow(() -> new NotFoundException("Club not found: " + id));
    }

    @POST                                                                // POST /clubs
    @Transactional                                                       // wrap in transaction for DB write
    public Response create(CreateClubRequest req) {                      // JSON request body mapped to DTO
        if (req == null || req.name == null || req.name.isBlank())
            throw new BadRequestException("name is required");
        if (req.budget == null || req.budget.compareTo(BigDecimal.ZERO) < 0)
            throw new BadRequestException("budget must be >= 0");

        Club c = new Club();                                             // new entity
        c.name = req.name.trim();                                        // set name
        c.budget = req.budget;                                           // set budget
        c.persist();                                                     // INSERT into DB

        return Response                                                  // HTTP 201 + created entity
                .status(Response.Status.CREATED)
                .entity(c)
                .build();
    }
}



src/main/java/com/example/transfer/PlayerResource.java:

package com.example.transfer;

import com.example.transfer.dto.CreatePlayerRequest;                      // DTO for POST
import io.smallrye.common.annotation.Blocking;                           // blocking (JPA)
import jakarta.transaction.Transactional;                                 // DB write boundary
import jakarta.ws.rs.*;                                                   // JAX-RS
import jakarta.ws.rs.core.MediaType;                                      // JSON content-type
import jakarta.ws.rs.core.Response;                                       // HTTP responses
import java.math.BigDecimal;                                              // for price checks
import java.util.List;                                                    // list endpoint

@Path("/players")                                                         // base path for player API
@Consumes(MediaType.APPLICATION_JSON)
@Produces(MediaType.APPLICATION_JSON)
@Blocking
public class PlayerResource {

    @GET                                                                  // GET /players
    public List<Player> list() {
        return Player.listAll();                                          // SELECT * FROM Player
    }

    @GET
    @Path("/{id}")                                                        // GET /players/{id}
    public Player get(@PathParam("id") Long id) {
        return Player.findByIdOptional(id)
                .orElseThrow(() -> new NotFoundException("Player not found: " + id));
    }

    @POST                                                                 // POST /players
    @Transactional
    public Response create(CreatePlayerRequest req) {
        if (req == null || req.name == null || req.name.isBlank())
            throw new BadRequestException("name is required");
        if (req.price == null || req.price.compareTo(BigDecimal.ZERO) < 0)
            throw new BadRequestException("price must be >= 0");
        if (req.clubId == null)
            throw new BadRequestException("clubId is required");

        Club club = Club.findByIdOptional(req.clubId)                     // resolve owning club
                .orElseThrow(() -> new NotFoundException("clubId not found: " + req.clubId));

        Player p = new Player();                                          // new player
        p.name = req.name.trim();                                         // set fields
        p.price = req.price;
        p.club = club;                                                    // link to owner club
        p.persist();                                                      // INSERT

        return Response.status(Response.Status.CREATED).entity(p).build();// return 201
    }
}



src/main/java/com/example/transfer/TransferService.java:

package com.example.transfer;

import com.example.transfer.dto.TransferResult;                 // response DTO
import jakarta.enterprise.context.ApplicationScoped;            // CDI bean (one per app)
import jakarta.transaction.Transactional;                       // wrap transfer in a transaction
import jakarta.ws.rs.BadRequestException;                       // 400 on invalid request
import jakarta.ws.rs.NotFoundException;                         // 404 when entity missing
import java.math.BigDecimal;                                    // money operations

@ApplicationScoped                                               // managed bean
public class TransferService {

    @Transactional                                              // all DB changes happen atomically
    public TransferResult transfer(Long buyerClubId, Long playerId) {
        if (buyerClubId == null || playerId == null)
            throw new BadRequestException("buyerClubId and playerId are required");

        Club buyer = Club.findByIdOptional(buyerClubId)         // fetch buyer
                .orElseThrow(() -> new NotFoundException("Buyer club not found: " + buyerClubId));

        Player player = Player.findByIdOptional(playerId)       // fetch player
                .orElseThrow(() -> new NotFoundException("Player not found: " + playerId));

        Club seller = player.club;                              // current owner
        if (seller == null)
            throw new BadRequestException("Player has no current club");
        if (seller.id.equals(buyer.id))
            throw new BadRequestException("Buyer already owns this player");

        BigDecimal price = player.price;                        // agreed price
        if (buyer.budget.compareTo(price) < 0)                  // can buyer afford?
            throw new BadRequestException("Buyer cannot afford this player");

        // Money moves: buyer pays, seller receives
        buyer.budget = buyer.budget.subtract(price);            // deduct from buyer
        seller.budget = seller.budget.add(price);               // add to seller

        // Transfer registration
        player.club = buyer;                                    // change ownership

        // No explicit persist() needed: entities are managed in a transaction.

        // Build a friendly result payload
        TransferResult result = new TransferResult();
        result.playerId = player.id;
        result.playerName = player.name;
        result.fromClub = seller.name;
        result.toClub = buyer.name;
        result.price = price;
        result.buyerBudgetAfter = buyer.budget;
        result.sellerBudgetAfter = seller.budget;

        return result;                                          // returned as JSON by resource
    }
}



src/main/java/com/example/transfer/TransferResource.java:

package com.example.transfer;

import com.example.transfer.dto.TransferRequest;                 // input DTO
import com.example.transfer.dto.TransferResult;                  // output DTO
import io.smallrye.common.annotation.Blocking;                   // JPA is blocking
import jakarta.inject.Inject;                                    // DI for service
import jakarta.ws.rs.*;                                          // JAX-RS annotations
import jakarta.ws.rs.core.MediaType;                             // JSON
import jakarta.ws.rs.core.Response;                              // HTTP responses

@Path("/transfers")                                              // base path for transfers
@Consumes(MediaType.APPLICATION_JSON)
@Produces(MediaType.APPLICATION_JSON)
@Blocking
public class TransferResource {

    @Inject                                                      // inject our business service
    TransferService service;

    @POST                                                        // POST /transfers
    public Response transfer(TransferRequest req) {              // JSON -> DTO
        TransferResult result = service.transfer(req.buyerClubId, req.playerId);  // do it
        return Response.ok(result).build();                      // 200 with result JSON
    }
}


src/main/resources/import.sql:

-- Clubs
INSERT INTO Club(id, name, budget) VALUES (1, 'Arandale FC', 100000000.00);
INSERT INTO Club(id, name, budget) VALUES (2, 'Bristol Rovers 2.0', 45000000.00);

-- Players
INSERT INTO Player(id, name, price, club_id) VALUES (1, 'Luis Bento', 30000000.00, 1);
INSERT INTO Player(id, name, price, club_id) VALUES (2, 'Marco Silva', 60000000.00, 1);

########################################################################################


➜  transfer-market git:(main) ✗ ./gradlew quarkusDev

> Task :compileJava FAILED
/Users/arun-joy.joseph/IdeaProjects/transfer-market/src/main/java/org/acme/ClubResource.java:28: error: incompatible types: no instance(s) of type variable(s) X exist so that PanacheEntityBase conforms to Club
                .orElseThrow(() -> new NotFoundException("Club not found: " + id));
                            ^
  where X,T are type-variables:
    X extends Throwable declared in method <X>orElseThrow(Supplier<? extends X>)
    T extends Object declared in class Optional
1 error

[Incubating] Problems report is available at: file:///Users/arun-joy.joseph/IdeaProjects/transfer-market/build/reports/problems/problems-report.html

FAILURE: Build failed with an exception.

* What went wrong:
Execution failed for task ':compileJava'.
> Compilation failed; see the compiler output below.
  /Users/arun-joy.joseph/IdeaProjects/transfer-market/src/main/java/org/acme/ClubResource.java:28: error: incompatible types: no instance(s) of type variable(s) X exist so that PanacheEntityBase conforms to Club
                  .orElseThrow(() -> new NotFoundException("Club not found: " + id));
                              ^
    where X,T are type-variables:
      X extends Throwable declared in method <X>orElseThrow(Supplier<? extends X>)
      T extends Object declared in class Optional
  1 error

* Try:
> Check your code and dependencies to fix the compilation error(s)
> Run with --scan to generate a Build Scan (Powered by Develocity).

Deprecated Gradle features were used in this build, making it incompatible with Gradle 10.

You can use '--warning-mode all' to show the individual deprecation warnings and determine if they come from your own scripts or plugins.

For more on this, please refer to https://docs.gradle.org/9.1.0/userguide/command_line_interface.html#sec:command_line_warnings in the Gradle documentation.

BUILD FAILED in 2m 2s
6 actionable tasks: 1 executed, 5 up-to-date


# Create a player for Arandale FC (assume Arandale has id 1; adjust if different)
curl -s -X POST http://localhost:8080/players \
  -H 'Content-Type: application/json' \
  -d '{"name":"Luis Bento","price":30000000,"clubId":1}' | jq

# Create another player
curl -s -X POST http://localhost:8080/players \
  -H 'Content-Type: application/json' \
  -d '{"name":"Marco Silva","price":50000000,"clubId":1}' | jq

# List players (note: each JSON has "clubId" but not the nested club object)
curl -s http://localhost:8080/players | jq





# 1) Create two clubs
curl -s -X POST http://localhost:8080/clubs -H 'Content-Type: application/json' \
  -d '{"name":"Arandale FC","budget":100000000}' | jq

curl -s -X POST http://localhost:8080/clubs -H 'Content-Type: application/json' \
  -d '{"name":"Bristol Rovers 2.0","budget":45000000}' | jq

# Confirm their IDs (note them)
curl -s http://localhost:8080/clubs | jq

# Suppose Arandale id=1, Bristol id=2 (adjust if different)

# 2) Create a player owned by Arandale
curl -s -X POST http://localhost:8080/players -H 'Content-Type: application/json' \
  -d '{"name":"Luis Bento","price":30000000,"clubId":1}' | jq

# Confirm player exists
curl -s http://localhost:8080/players | jq

# 3) Attempt transfer where buyer cannot afford (try lowering Bristol’s budget first if needed)
# If Bristol has 45m, price is 30m — this WILL succeed; to test failure, try a 60m player or reduce budget.
# Let's create a pricier player for a failure case:
curl -s -X POST http://localhost:8080/players -H 'Content-Type: application/json' \
  -d '{"name":"Marco Silva","price":60000000,"clubId":1}' | jq

# Try to buy expensive player with Bristol (should fail: 400 Bad Request)
curl -i -s -X POST http://localhost:8080/transfers -H 'Content-Type: application/json' \
  -d '{"buyerClubId":2,"playerId":2}'

# 4) Now buy the 30m player (should succeed)
curl -s -X POST http://localhost:8080/transfers -H 'Content-Type: application/json' \
  -d '{"buyerClubId":2,"playerId":1}' | jq

# 5) Verify budgets changed: Bristol decreased by 30m; Arandale increased by 30m
curl -s http://localhost:8080/clubs | jq

# 6) Check player ownership moved (playerId=1 should show clubId=2 now)
curl -s http://localhost:8080/players | jq





➜  transfer-market git:(main) ✗  ./gradlew clean build
Unrecognized configuration key "quarkus.http.cors" was provided; it will be ignored; verify that the dependency extension for this configuration is set or that you did not make a typo
Unrecognized configuration key "quarkus.hibernate-orm.format-sql" was provided; it will be ignored; verify that the dependency extension for this configuration is set or that you did not make a typo
The "quarkus.hibernate-orm.database.generation" config property is deprecated and should not be used anymore.

> Task :test

GreetingResourceTest > testHelloEndpoint() FAILED
    java.lang.AssertionError at GreetingResourceTest.java:17

1 test completed, 1 failed

> Task :test FAILED

[Incubating] Problems report is available at: file:///Users/arun-joy.joseph/IdeaProjects/transfer-market/build/reports/problems/problems-report.html

FAILURE: Build failed with an exception.

* What went wrong:
Execution failed for task ':test'.
> There were failing tests. See the report at: file:///Users/arun-joy.joseph/IdeaProjects/transfer-market/build/reports/tests/test/index.html

* Try:
> Run with --scan to generate a Build Scan (Powered by Develocity).

Deprecated Gradle features were used in this build, making it incompatible with Gradle 10.

You can use '--warning-mode all' to show the individual deprecation warnings and determine if they come from your own scripts or plugins.

For more on this, please refer to https://docs.gradle.org/9.1.0/userguide/command_line_interface.html#sec:command_line_warnings in the Gradle documentation.

BUILD FAILED in 2m 18s
10 actionable tasks: 10 executed


plugins {
    id 'java'
    id 'io.quarkus'
}

repositories {
    mavenCentral()
    mavenLocal()
    maven {
        url = "https://nexus.mgmt-bld.oncp.dev/repository/maven-public/"
    }
    maven {
        url = "https://nexus.sbs-bld.oncp.dev/repository/sbs-pdt/"
    }
    maven {
        url = "https://nexus.sbs-bld.oncp.dev/repository/shared-services/"
    }
}

dependencies {
    implementation enforcedPlatform("${quarkusPlatformGroupId}:${quarkusPlatformArtifactId}:${quarkusPlatformVersion}")
//    implementation 'io.quarkus:quarkus-arc'
    implementation 'io.quarkus:quarkus-rest'

    implementation 'io.quarkus:quarkus-rest-jackson'
    implementation 'io.quarkus:quarkus-hibernate-orm-panache'
    implementation 'io.quarkus:quarkus-jdbc-h2'

    testImplementation 'io.quarkus:quarkus-junit5'
    testImplementation 'io.rest-assured:rest-assured'
}

group = 'org.acme'
version = '1.0.0-SNAPSHOT'

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

test {
    systemProperty "java.util.logging.manager", "org.jboss.logmanager.LogManager"
}
compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << '-parameters'
}

compileTestJava {
    options.encoding = 'UTF-8'
}



gradle.properties:

# Gradle properties

quarkusPluginId=io.quarkus
quarkusPluginVersion=3.28.2
quarkusPlatformGroupId=io.quarkus.platform
quarkusPlatformArtifactId=quarkus-bom
quarkusPlatformVersion=3.28.2


settings.gradle:

pluginManagement {
    repositories {
        mavenCentral()
        gradlePluginPortal()
        mavenLocal()
        maven {
            url 'https://nexus.mgmt-bld.oncp.dev/repository/maven-public/'
        }
        maven {
            url = "https://nexus.sbs-bld.oncp.dev/repository/sbs-pdt/"
        }
    }
    plugins {
        id "${quarkusPluginId}" version "${quarkusPluginVersion}"
    }
}
rootProject.name='transfer-market'


# CORS (new key name)
quarkus.http.cors.enabled=true

# Hibernate ORM — logging keys live under "log.*"
quarkus.hibernate-orm.log.sql=true
quarkus.hibernate-orm.log.format-sql=true

# Schema generation (old key is deprecated)
quarkus.hibernate-orm.schema.generation=drop-and-create

# Keep your datasource as-is
quarkus.datasource.db-kind=h2
quarkus.datasource.jdbc.url=jdbc:h2:mem:transferdb;DB_CLOSE_DELAY=-1
quarkus.datasource.username=sa
quarkus.datasource.password=sa

# Optional: seed file if you’re using it
quarkus.hibernate-orm.sql-load-script=import.sql


➜  transfer-market git:(main) ✗  ./gradlew clean build

[Incubating] Problems report is available at: file:///Users/arun-joy.joseph/IdeaProjects/transfer-market/build/reports/problems/problems-report.html

FAILURE: Build failed with an exception.

* Where:
Settings file '/Users/arun-joy.joseph/IdeaProjects/transfer-market/settings.gradle' line: 14

* What went wrong:
A problem occurred evaluating settings 'transfer-market'.
> Could not get unknown property 'quarkusPluginId' for object of type org.gradle.plugin.management.internal.DefaultPluginManagementSpec$PluginDependenciesSpecImpl.

* Try:
> Run with --stacktrace option to get the stack trace.
> Run with --info or --debug option to get more log output.
> Run with --scan to generate a Build Scan (Powered by Develocity).
> Get more help at https://help.gradle.org.

Deprecated Gradle features were used in this build, making it incompatible with Gradle 10.

You can use '--warning-mode all' to show the individual deprecation warnings and determine if they come from your own scripts or plugins.

For more on this, please refer to https://docs.gradle.org/9.1.0/userguide/command_line_interface.html#sec:command_line_warnings in the Gradle documentation.

BUILD FAILED in 289ms


➜  transfer-market git:(main) ✗ ./gradlew clean build

[Incubating] Problems report is available at: file:///Users/arun-joy.joseph/IdeaProjects/transfer-market/build/reports/problems/problems-report.html

FAILURE: Build failed with an exception.

* Where:
Build file '/Users/arun-joy.joseph/IdeaProjects/transfer-market/build.gradle' line: 21

* What went wrong:
A problem occurred evaluating root project 'transfer-market'.
> Could not get unknown property 'quarkusPlatformGroupId' for object of type org.gradle.api.internal.artifacts.dsl.dependencies.DefaultDependencyHandler.

* Try:
> Run with --stacktrace option to get the stack trace.
> Run with --info or --debug option to get more log output.
> Run with --scan to generate a Build Scan (Powered by Develocity).
> Get more help at https://help.gradle.org.

Deprecated Gradle features were used in this build, making it incompatible with Gradle 10.

You can use '--warning-mode all' to show the individual deprecation warnings and determine if they come from your own scripts or plugins.

For more on this, please refer to https://docs.gradle.org/9.1.0/userguide/command_line_interface.html#sec:command_line_warnings in the Gradle documentation.

BUILD FAILED in 16s


dependencies {
  implementation enforcedPlatform("io.quarkus.platform:quarkus-bom:3.28.2")
  implementation "io.quarkus:quarkus-rest"
  implementation "io.quarkus:quarkus-rest-jackson"
  implementation "io.quarkus:quarkus-hibernate-orm-panache"
  implementation "io.quarkus:quarkus-jdbc-h2"
  testImplementation "io.quarkus:quarkus-junit5"
  testImplementation "io.rest-assured:rest-assured"
}


build.gradle:

dependencies {
  // already present
  testImplementation "io.quarkus:quarkus-junit5"
  testImplementation "io.rest-assured:rest-assured"

  // add this for @InjectMock and PanacheMock (Mockito support)
  testImplementation "io.quarkus:quarkus-junit5-mockito"
}



src/test/java/org/acme/testsupport/Db.java:

package org.acme.testsupport;

import jakarta.transaction.Transactional;
import org.acme.Club;
import org.acme.Player;
import java.math.BigDecimal;

public final class Db {
    private Db() {}

    @Transactional
    public static void clearAll() {
        Player.deleteAll();
        Club.deleteAll();
    }

    @Transactional
    public static Club newClub(String name, String budget) {
        Club c = new Club();
        c.name = name;
        c.budget = new BigDecimal(budget);
        c.persist();
        return c;
    }

    @Transactional
    public static Player newPlayer(String name, String price, Club owner) {
        Player p = new Player();
        p.name = name;
        p.price = new BigDecimal(price);
        p.club = owner;
        p.persist();
        return p;
    }
}



src/test/java/org/acme/testsupport/ResetDatabasePerTest.java:

package org.acme.testsupport;

import io.quarkus.test.junit.QuarkusTest;
import org.junit.jupiter.api.BeforeEach;

@QuarkusTest
public abstract class ResetDatabasePerTest {
    @BeforeEach
    void wipe() {
        Db.clearAll();
    }
}





src/test/java/org/acme/api/ClubResourceApiTest.java:

package org.acme.api;

import io.quarkus.hibernate.orm.panache.PanacheMock;
import io.quarkus.test.junit.QuarkusTest;
import io.restassured.http.ContentType;
import org.acme.Club;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.math.BigDecimal;
import java.util.List;
import java.util.Optional;

import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.*;
import static org.mockito.Mockito.*;

@QuarkusTest
class ClubResourceApiTest {

    @BeforeEach
    void setupMocks() {
        PanacheMock.mock(Club.class);
        clearInvocations(Club.class);
        reset(Club.class);
    }

    @Test
    void list_returns_clubs_from_panache() {
        // arrange
        Club c = new Club();
        c.id = 1L; c.name = "Arandale FC"; c.budget = new BigDecimal("100000000");
        when(Club.listAll()).thenReturn(List.of(c));

        // act/assert
        given()
            .accept(ContentType.JSON)
        .when()
            .get("/clubs")
        .then()
            .statusCode(200)
            .body("size()", is(1))
            .body("[0].id", is(1))
            .body("[0].name", is("Arandale FC"));
    }

    @Test
    void get_by_id_404_when_missing() {
        when(Club.findByIdOptional(999L)).thenReturn(Optional.empty());

        given()
            .accept(ContentType.JSON)
        .when()
            .get("/clubs/999")
        .then()
            .statusCode(404);
    }

    @Test
    void create_valid_payload_persists_and_returns_201() {
        // we’ll just verify persist() is called on a Club instance
        doAnswer(invocation -> {
            Club c = (Club) invocation.getMock(); // not needed; Panache persist() is instance
            return null;
        }).when(Club.class);

        given()
            .contentType(ContentType.JSON)
            .body("""
                  { "name": "Arandale FC", "budget": 100000000 }
                  """)
        .when()
            .post("/clubs")
        .then()
            .statusCode(201)
            .contentType(ContentType.JSON)
            .body("name", is("Arandale FC"))
            .body("budget", is(100000000));
        // (We don't assert DB state here — mocked test only checks API behavior.)
    }
}



src/test/java/org/acme/api/PlayerResourceApiTest.java:

package org.acme.api;

import io.quarkus.hibernate.orm.panache.PanacheMock;
import io.quarkus.test.junit.QuarkusTest;
import io.restassured.http.ContentType;
import org.acme.Club;
import org.acme.Player;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.math.BigDecimal;
import java.util.List;
import java.util.Optional;

import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.*;
import static org.mockito.Mockito.*;

@QuarkusTest
class PlayerResourceApiTest {

    @BeforeEach
    void setupMocks() {
        PanacheMock.mock(Player.class);
        PanacheMock.mock(Club.class);
        reset(Player.class, Club.class);
    }

    @Test
    void list_players_uses_panache_listAll() {
        Player p = new Player();
        p.id = 10L; p.name = "Luis Bento"; p.price = new BigDecimal("30000000");
        Club c = new Club(); c.id = 1L; p.club = c;

        when(Player.listAll()).thenReturn(List.of(p));

        given()
            .accept(ContentType.JSON)
        .when()
            .get("/players")
        .then()
            .statusCode(200)
            .body("size()", is(1))
            .body("[0].id", is(10))
            .body("[0].name", is("Luis Bento"))
            .body("[0].clubId", is(1));
    }

    @Test
    void get_player_404_when_missing() {
        when(Player.findByIdOptional(123L)).thenReturn(Optional.empty());

        given()
            .accept(ContentType.JSON)
        .when()
            .get("/players/123")
        .then()
            .statusCode(404);
    }

    @Test
    void create_player_validates_clubId() {
        // club lookup fails
        when(Club.findByIdOptional(99L)).thenReturn(Optional.empty());

        given()
            .contentType(ContentType.JSON)
            .body("""
                  {"name":"Ghost","price":1000,"clubId":99}
                  """)
        .when()
            .post("/players")
        .then()
            .statusCode(anyOf(is(404), is(400)));
    }
}




src/test/java/org/acme/api/TransferResourceApiTest.java:

package org.acme.api;

import io.quarkus.test.junit.QuarkusTest;
import io.quarkus.test.junit.mockito.InjectMock;
import io.restassured.http.ContentType;
import org.acme.dto.TransferResult;
import org.acme.TransferService;
import org.junit.jupiter.api.Test;

import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.*;
import static org.mockito.ArgumentMatchers.anyLong;
import static org.mockito.Mockito.when;

@QuarkusTest
class TransferResourceApiTest {

    @InjectMock
    TransferService service; // Quarkus will replace the real bean with this mock

    @Test
    void transfer_endpoint_returns_service_result() {
        TransferResult r = new TransferResult();
        r.playerId = 1L; r.playerName = "Luis Bento";
        r.fromClub = "Arandale FC"; r.toClub = "Bristol Rovers 2.0";
        r.price = new java.math.BigDecimal("30000000");
        r.buyerBudgetAfter = new java.math.BigDecimal("15000000");
        r.sellerBudgetAfter = new java.math.BigDecimal("130000000");

        when(service.transfer(anyLong(), anyLong())).thenReturn(r);

        given()
            .contentType(ContentType.JSON)
            .body("""
                  { "buyerClubId": 2, "playerId": 1 }
                  """)
        .when()
            .post("/transfers")
        .then()
            .statusCode(200)
            .contentType(ContentType.JSON)
            .body("playerId", is(1))
            .body("playerName", is("Luis Bento"))
            .body("toClub", is("Bristol Rovers 2.0"));
    }
}





src/test/java/org/acme/service/TransferServiceTest.java:

package org.acme.service;

import io.quarkus.test.junit.QuarkusTest;
import jakarta.inject.Inject;
import jakarta.ws.rs.BadRequestException;
import jakarta.ws.rs.NotFoundException;
import org.acme.Club;
import org.acme.Player;
import org.acme.TransferService;
import org.acme.testsupport.Db;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.math.BigDecimal;

import static org.junit.jupiter.api.Assertions.*;

@QuarkusTest
class TransferServiceTest {

    @Inject
    TransferService service;

    @BeforeEach
    void reset() {
        Db.clearAll();
    }

    @Test
    void success_moves_ownership_and_updates_budgets() {
        Club seller = Db.newClub("Arandale FC", "100000000");
        Club buyer  = Db.newClub("Bristol Rovers 2.0", "45000000");
        Player p    = Db.newPlayer("Luis Bento", "30000000", seller);

        var result = service.transfer(buyer.id, p.id);

        assertEquals("Arandale FC", result.fromClub);
        assertEquals("Bristol Rovers 2.0", result.toClub);
        assertEquals(new BigDecimal("30000000"), result.price);
        assertEquals(new BigDecimal("15000000"), result.buyerBudgetAfter);
        assertEquals(new BigDecimal("130000000"), result.sellerBudgetAfter);

        // Verify persisted side-effects
        Player reloaded = Player.findById(p.id);
        assertEquals(buyer.id, reloaded.club.id);

        Club reBuyer  = Club.findById(buyer.id);
        Club reSeller = Club.findById(seller.id);
        assertEquals(new BigDecimal("15000000"), reBuyer.budget);
        assertEquals(new BigDecimal("130000000"), reSeller.budget);
    }

    @Test
    void fails_when_buyer_cannot_afford() {
        Club seller = Db.newClub("Seller FC", "90000000");
        Club buyer  = Db.newClub("Buyer FC",  "1000000");
        Player p    = Db.newPlayer("Expensive", "60000000", seller);

        var ex = assertThrows(BadRequestException.class,
                () -> service.transfer(buyer.id, p.id));
        assertTrue(ex.getMessage().toLowerCase().contains("afford"));
    }

    @Test
    void fails_when_buyer_already_owner() {
        Club club = Db.newClub("Solo FC", "50000000");
        Player p  = Db.newPlayer("My Guy", "1000000", club);

        assertThrows(BadRequestException.class, () -> service.transfer(club.id, p.id));
    }

    @Test
    void fails_when_entities_missing() {
        assertThrows(NotFoundException.class, () -> service.transfer(999L, 1L));
        assertThrows(NotFoundException.class, () -> service.transfer(1L, 999L));
    }
}





src/test/java/org/acme/e2e/TransferE2eTest.java:

package org.acme.e2e;

import io.restassured.http.ContentType;
import org.acme.testsupport.ResetDatabasePerTest;
import org.junit.jupiter.api.Test;

import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.*;

public class TransferE2eTest extends ResetDatabasePerTest {

    @Test
    void end_to_end_transfer_flow() {
        // create two clubs
        int sellerId =
        given().contentType(ContentType.JSON)
               .body("""{"name":"Arandale FC","budget":100000000}""")
        .when().post("/clubs")
        .then().statusCode(201).extract().path("id");

        int buyerId =
        given().contentType(ContentType.JSON)
               .body("""{"name":"Bristol Rovers 2.0","budget":45000000}""")
        .when().post("/clubs")
        .then().statusCode(201).extract().path("id");

        // create player
        int playerId =
        given().contentType(ContentType.JSON)
               .body("""{"name":"Luis Bento","price":30000000,"clubId":%d}""".formatted(sellerId))
        .when().post("/players")
        .then().statusCode(201).extract().path("id");

        // do transfer
        given().contentType(ContentType.JSON)
               .body("""{"buyerClubId":%d,"playerId":%d}""".formatted(buyerId, playerId))
        .when().post("/transfers")
        .then().statusCode(200)
               .body("toClub", is("Bristol Rovers 2.0"));

        // verify ownership moved
        given().accept(ContentType.JSON)
        .when().get("/players/{id}", playerId)
        .then().statusCode(200)
               .body("clubId", is(buyerId));
    }
}




How to run

All tests: ./gradlew clean test

Just service tests (by package filter):
./gradlew test --tests "org.acme.service.*"

Just mocked API tests:
./gradlew test --tests "org.acme.api.*"

Just E2E:
./gradlew test --tests "org.acme.e2e.*"



➜  transfer-market git:(main) ✗ ./gradlew clean build --refresh-dependencies
Starting a Gradle Daemon (subsequent builds will be faster)

> Task :compileTestJava FAILED
/Users/arun-joy.joseph/IdeaProjects/transfer-market/src/test/java/org/acme/api/TransferResourceApiTest.java:4: error: cannot find symbol
import io.quarkus.test.junit.mockito.InjectMock;
                                    ^
  symbol:   class InjectMock
  location: package io.quarkus.test.junit.mockito
/Users/arun-joy.joseph/IdeaProjects/transfer-market/src/test/java/org/acme/api/ClubResourceApiTest.java:3: error: cannot find symbol
import io.quarkus.hibernate.orm.panache.PanacheMock;
                                       ^
  symbol:   class PanacheMock
  location: package io.quarkus.hibernate.orm.panache
/Users/arun-joy.joseph/IdeaProjects/transfer-market/src/test/java/org/acme/api/PlayerResourceApiTest.java:3: error: cannot find symbol
import io.quarkus.hibernate.orm.panache.PanacheMock;
                                       ^
  symbol:   class PanacheMock
  location: package io.quarkus.hibernate.orm.panache
/Users/arun-joy.joseph/IdeaProjects/transfer-market/src/test/java/org/acme/api/TransferResourceApiTest.java:18: error: cannot find symbol
    @InjectMock
     ^
  symbol:   class InjectMock
  location: class TransferResourceApiTest
/Users/arun-joy.joseph/IdeaProjects/transfer-market/src/test/java/org/acme/api/ClubResourceApiTest.java:23: error: cannot find symbol
        PanacheMock.mock(Club.class);
        ^
  symbol:   variable PanacheMock
  location: class ClubResourceApiTest
/Users/arun-joy.joseph/IdeaProjects/transfer-market/src/test/java/org/acme/api/PlayerResourceApiTest.java:24: error: cannot find symbol
        PanacheMock.mock(Player.class);
        ^
  symbol:   variable PanacheMock
  location: class PlayerResourceApiTest
/Users/arun-joy.joseph/IdeaProjects/transfer-market/src/test/java/org/acme/api/PlayerResourceApiTest.java:25: error: cannot find symbol
        PanacheMock.mock(Club.class);
        ^
  symbol:   variable PanacheMock
  location: class PlayerResourceApiTest
Note: Some input files use unchecked or unsafe operations.
Note: Recompile with -Xlint:unchecked for details.
7 errors

[Incubating] Problems report is available at: file:///Users/arun-joy.joseph/IdeaProjects/transfer-market/build/reports/problems/problems-report.html

FAILURE: Build failed with an exception.

* What went wrong:
Execution failed for task ':compileTestJava'.
> Compilation failed; see the compiler output below.
  /Users/arun-joy.joseph/IdeaProjects/transfer-market/src/test/java/org/acme/api/TransferResourceApiTest.java:4: error: cannot find symbol
  import io.quarkus.test.junit.mockito.InjectMock;
                                      ^
    symbol:   class InjectMock
    location: package io.quarkus.test.junit.mockito
  /Users/arun-joy.joseph/IdeaProjects/transfer-market/src/test/java/org/acme/api/ClubResourceApiTest.java:3: error: cannot find symbol
  import io.quarkus.hibernate.orm.panache.PanacheMock;
                                         ^
    symbol:   class PanacheMock
    location: package io.quarkus.hibernate.orm.panache
  /Users/arun-joy.joseph/IdeaProjects/transfer-market/src/test/java/org/acme/api/PlayerResourceApiTest.java:3: error: cannot find symbol
  import io.quarkus.hibernate.orm.panache.PanacheMock;
                                         ^
    symbol:   class PanacheMock
    location: package io.quarkus.hibernate.orm.panache
  /Users/arun-joy.joseph/IdeaProjects/transfer-market/src/test/java/org/acme/api/TransferResourceApiTest.java:18: error: cannot find symbol
      @InjectMock
       ^
    symbol:   class InjectMock
    location: class TransferResourceApiTest
  /Users/arun-joy.joseph/IdeaProjects/transfer-market/src/test/java/org/acme/api/ClubResourceApiTest.java:23: error: cannot find symbol
          PanacheMock.mock(Club.class);
          ^
    symbol:   variable PanacheMock
    location: class ClubResourceApiTest
  /Users/arun-joy.joseph/IdeaProjects/transfer-market/src/test/java/org/acme/api/PlayerResourceApiTest.java:24: error: cannot find symbol
          PanacheMock.mock(Player.class);
          ^
    symbol:   variable PanacheMock
    location: class PlayerResourceApiTest
  /Users/arun-joy.joseph/IdeaProjects/transfer-market/src/test/java/org/acme/api/PlayerResourceApiTest.java:25: error: cannot find symbol
          PanacheMock.mock(Club.class);
          ^
    symbol:   variable PanacheMock
    location: class PlayerResourceApiTest
  Note: Recompile with -Xlint:unchecked for details.
  Note: Some input files use unchecked or unsafe operations.
  7 errors

* Try:
> Check your code and dependencies to fix the compilation error(s)
> Run with --scan to generate a Build Scan (Powered by Develocity).

Deprecated Gradle features were used in this build, making it incompatible with Gradle 10.

You can use '--warning-mode all' to show the individual deprecation warnings and determine if they come from your own scripts or plugins.

For more on this, please refer to https://docs.gradle.org/9.1.0/userguide/command_line_interface.html#sec:command_line_warnings in the Gradle documentation.

BUILD FAILED in 3m 50s
9 actionable tasks: 9 executed


➜  transfer-market git:(main) ✗ ./gradlew clean test --refresh-dependencies
Starting a Gradle Daemon, 1 busy and 1 stopped Daemons could not be reused, use --status for details

> Task :compileTestJava
/Users/arun-joy.joseph/IdeaProjects/transfer-market/src/test/java/org/acme/api/TransferResourceApiTest.java:4: error: cannot find symbol
import io.quarkus.test.junit.mockito.InjectMock;
                                    ^
  symbol:   class InjectMock
  location: package io.quarkus.test.junit.mockito
/Users/arun-joy.joseph/IdeaProjects/transfer-market/src/test/java/org/acme/api/TransferResourceApiTest.java:18: error: cannot find symbol
    @InjectMock
     ^
  symbol:   class InjectMock
  location: class TransferResourceApiTest
Note: Some input files use unchecked or unsafe operations.
Note: Recompile with -Xlint:unchecked for details.
2 errors

> Task :compileTestJava FAILED

[Incubating] Problems report is available at: file:///Users/arun-joy.joseph/IdeaProjects/transfer-market/build/reports/problems/problems-report.html

FAILURE: Build failed with an exception.

* What went wrong:
Execution failed for task ':compileTestJava'.
> Compilation failed; see the compiler output below.
  /Users/arun-joy.joseph/IdeaProjects/transfer-market/src/test/java/org/acme/api/TransferResourceApiTest.java:4: error: cannot find symbol
  import io.quarkus.test.junit.mockito.InjectMock;
                                      ^
    symbol:   class InjectMock
    location: package io.quarkus.test.junit.mockito
  /Users/arun-joy.joseph/IdeaProjects/transfer-market/src/test/java/org/acme/api/TransferResourceApiTest.java:18: error: cannot find symbol
      @InjectMock
       ^
    symbol:   class InjectMock
    location: class TransferResourceApiTest
  Note: Recompile with -Xlint:unchecked for details.
  Note: Some input files use unchecked or unsafe operations.
  2 errors

* Try:
> Check your code and dependencies to fix the compilation error(s)
> Run with --scan to generate a Build Scan (Powered by Develocity).

Deprecated Gradle features were used in this build, making it incompatible with Gradle 10.

You can use '--warning-mode all' to show the individual deprecation warnings and determine if they come from your own scripts or plugins.

For more on this, please refer to https://docs.gradle.org/9.1.0/userguide/command_line_interface.html#sec:command_line_warnings in the Gradle documentation.

BUILD FAILED in 3m 20s
8 actionable tasks: 8 executed


src/test/java/org/acme/api/TransferResourceApiTest.java:


package org.acme.api;

import io.quarkus.test.junit.QuarkusTest;
import io.quarkus.test.junit.QuarkusMock;
import io.restassured.http.ContentType;
import org.acme.TransferService;
import org.acme.dto.TransferResult;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.is;
import static org.mockito.ArgumentMatchers.anyLong;
import static org.mockito.Mockito.when;

@QuarkusTest
class TransferResourceApiTest {

    @BeforeEach
    void registerMock() {
        // Create a Mockito mock and install it as the CDI bean
        TransferService mock = Mockito.mock(TransferService.class);

        TransferResult r = new TransferResult();
        r.playerId = 1L; r.playerName = "Luis Bento";
        r.fromClub = "Arandale FC"; r.toClub = "Bristol Rovers 2.0";
        r.price = new java.math.BigDecimal("30000000");
        r.buyerBudgetAfter = new java.math.BigDecimal("15000000");
        r.sellerBudgetAfter = new java.math.BigDecimal("130000000");

        when(mock.transfer(anyLong(), anyLong())).thenReturn(r);

        // This line tells Quarkus: use `mock` whenever TransferService is injected
        QuarkusMock.installMockForType(mock, TransferService.class);
    }

    @Test
    void transfer_endpoint_returns_service_result() {
        given()
            .contentType(ContentType.JSON)
            .body("""
                  { "buyerClubId": 2, "playerId": 1 }
                  """)
        .when()
            .post("/transfers")
        .then()
            .statusCode(200)
            .contentType(ContentType.JSON)
            .body("playerId", is(1))
            .body("playerName", is("Luis Bento"))
            .body("toClub", is("Bristol Rovers 2.0"));
    }
}


➜  transfer-market git:(main) ✗ ./gradlew clean test --refresh-dependencies
Starting a Gradle Daemon, 2 stopped Daemons could not be reused, use --status for details

> Task :compileTestJava
Note: Some input files use unchecked or unsafe operations.
Note: Recompile with -Xlint:unchecked for details.
Unrecognized configuration key "quarkus.http.cors" was provided; it will be ignored; verify that the dependency extension for this configuration is set or that you did not make a typo
Unrecognized configuration key "quarkus.hibernate-orm.format-sql" was provided; it will be ignored; verify that the dependency extension for this configuration is set or that you did not make a typo
The "quarkus.hibernate-orm.database.generation" config property is deprecated and should not be used anymore.
OpenJDK 64-Bit Server VM warning: Sharing is only supported for boot loader classes because bootstrap classpath has been appended

> Task :test

ClubResourceApiTest > create_valid_payload_persists_and_returns_201() FAILED
    org.mockito.exceptions.misusing.NotAMockException at ClubResourceApiTest.java:25

ClubResourceApiTest > get_by_id_404_when_missing() FAILED
    org.mockito.exceptions.misusing.NotAMockException at ClubResourceApiTest.java:25

ClubResourceApiTest > list_returns_clubs_from_panache() FAILED
    org.mockito.exceptions.misusing.NotAMockException at ClubResourceApiTest.java:25

PlayerResourceApiTest > create_player_validates_clubId() FAILED
    org.mockito.exceptions.misusing.NotAMockException at PlayerResourceApiTest.java:27

PlayerResourceApiTest > list_players_uses_panache_listAll() FAILED
    org.mockito.exceptions.misusing.NotAMockException at PlayerResourceApiTest.java:27

PlayerResourceApiTest > get_player_404_when_missing() FAILED
    org.mockito.exceptions.misusing.NotAMockException at PlayerResourceApiTest.java:27

TransferServiceTest > success_moves_ownership_and_updates_budgets() FAILED
    org.opentest4j.AssertionFailedError at TransferServiceTest.java:39

12 tests completed, 7 failed

> Task :test FAILED

[Incubating] Problems report is available at: file:///Users/arun-joy.joseph/IdeaProjects/transfer-market/build/reports/problems/problems-report.html

FAILURE: Build failed with an exception.

* What went wrong:
Execution failed for task ':test'.
> There were failing tests. See the report at: file:///Users/arun-joy.joseph/IdeaProjects/transfer-market/build/reports/tests/test/index.html

* Try:
> Run with --scan to generate a Build Scan (Powered by Develocity).

Deprecated Gradle features were used in this build, making it incompatible with Gradle 10.

You can use '--warning-mode all' to show the individual deprecation warnings and determine if they come from your own scripts or plugins.

For more on this, please refer to https://docs.gradle.org/9.1.0/userguide/command_line_interface.html#sec:command_line_warnings in the Gradle documentation.

BUILD FAILED in 3m 21s
9 actionable tasks: 9 executed


src/test/java/org/acme/api/ClubResourceApiTest.java:

package org.acme.api;

import io.quarkus.panache.mock.PanacheMock;
import io.quarkus.test.junit.QuarkusTest;
import io.restassured.http.ContentType;
import org.acme.Club;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.math.BigDecimal;
import java.util.List;
import java.util.Optional;

import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.*;
import static org.mockito.Mockito.when;

@QuarkusTest
class ClubResourceApiTest {

    @BeforeEach
    void setupMocks() {
        PanacheMock.mock(Club.class);      // ✅ mock Panache
        // ❌ DO NOT call Mockito.reset/clearInvocations on Club.class
    }

    @AfterEach
    void tearDownMocks() {
        PanacheMock.unmock(Club.class);    // optional but keeps isolation clean
    }

    @Test
    void list_returns_clubs_from_panache() {
        Club c = new Club();
        c.id = 1L; c.name = "Arandale FC"; c.budget = new BigDecimal("100000000");
        when(Club.listAll()).thenReturn(List.of(c));

        given().accept(ContentType.JSON)
        .when().get("/clubs")
        .then().statusCode(200)
               .body("size()", is(1))
               .body("[0].id", is(1))
               .body("[0].name", is("Arandale FC"));
    }

    @Test
    void get_by_id_404_when_missing() {
        when(Club.findByIdOptional(999L)).thenReturn(Optional.empty());

        given().accept(ContentType.JSON)
        .when().get("/clubs/999")
        .then().statusCode(404);
    }

    @Test
    void create_valid_payload_persists_and_returns_201() {
        // We let persist() hit the real in-memory DB (fine in @QuarkusTest)
        given().contentType(ContentType.JSON)
               .body("""{ "name": "Arandale FC", "budget": 100000000 }""")
        .when().post("/clubs")
        .then().statusCode(201)
               .contentType(ContentType.JSON)
               .body("name", is("Arandale FC"))
               .body("budget", is(100000000));
    }
}



src/test/java/org/acme/api/PlayerResourceApiTest.java:

package org.acme.api;

import io.quarkus.panache.mock.PanacheMock;
import io.quarkus.test.junit.QuarkusTest;
import io.restassured.http.ContentType;
import org.acme.Club;
import org.acme.Player;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.math.BigDecimal;
import java.util.List;
import java.util.Optional;

import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.*;
import static org.mockito.Mockito.when;

@QuarkusTest
class PlayerResourceApiTest {

    @BeforeEach
    void setupMocks() {
        PanacheMock.mock(Player.class);    // ✅
        PanacheMock.mock(Club.class);      // ✅
    }

    @AfterEach
    void tearDownMocks() {
        PanacheMock.unmock(Player.class);
        PanacheMock.unmock(Club.class);
    }

    @Test
    void list_players_uses_panache_listAll() {
        Player p = new Player();
        p.id = 10L; p.name = "Luis Bento"; p.price = new BigDecimal("30000000");
        Club c = new Club(); c.id = 1L; p.club = c;

        when(Player.listAll()).thenReturn(List.of(p));

        given().accept(ContentType.JSON)
        .when().get("/players")
        .then().statusCode(200)
               .body("size()", is(1))
               .body("[0].id", is(10))
               .body("[0].name", is("Luis Bento"))
               .body("[0].clubId", is(1));
    }

    @Test
    void get_player_404_when_missing() {
        when(Player.findByIdOptional(123L)).thenReturn(Optional.empty());

        given().accept(ContentType.JSON)
        .when().get("/players/123")
        .then().statusCode(404);
    }

    @Test
    void create_player_with_unknown_club_fails() {
        when(Club.findByIdOptional(99L)).thenReturn(Optional.empty());

        given().contentType(ContentType.JSON)
               .body("""{"name":"Ghost","price":1000,"clubId":99}""")
        .when().post("/players")
        .then().statusCode(anyOf(is(404), is(400)));
    }
}




src/test/java/org/acme/service/TransferServiceTest.java:

// ... imports as you have ...
import static org.junit.jupiter.api.Assertions.*;

@QuarkusTest
class TransferServiceTest {

    // ... @Inject, @BeforeEach same as before ...

    private static void assertBigDecimalEquals(String expected, BigDecimal actual) {
        assertEquals(0, actual.compareTo(new BigDecimal(expected)),
            () -> "Expected " + expected + " but was " + actual);
    }

    @Test
    void success_moves_ownership_and_updates_budgets() {
        Club seller = Db.newClub("Arandale FC", "100000000");
        Club buyer  = Db.newClub("Bristol Rovers 2.0", "45000000");
        Player p    = Db.newPlayer("Luis Bento", "30000000", seller);

        var result = service.transfer(buyer.id, p.id);

        assertEquals("Arandale FC", result.fromClub);
        assertEquals("Bristol Rovers 2.0", result.toClub);
        assertBigDecimalEquals("30000000.00", result.price);
        assertBigDecimalEquals("15000000.00", result.buyerBudgetAfter);
        assertBigDecimalEquals("130000000.00", result.sellerBudgetAfter);

        Player reloaded = Player.findById(p.id);
        assertEquals(buyer.id, reloaded.club.id);

        Club reBuyer  = Club.findById(buyer.id);
        Club reSeller = Club.findById(seller.id);
        assertBigDecimalEquals("15000000.00", reBuyer.budget);
        assertBigDecimalEquals("130000000.00", reSeller.budget);
    }

    // other tests unchanged
}


➜  transfer-market git:(main) ✗ ./gradlew clean test --refresh-dependencies
Starting a Gradle Daemon, 3 stopped Daemons could not be reused, use --status for details

> Task :compileTestJava FAILED
/Users/arun-joy.joseph/IdeaProjects/transfer-market/src/test/java/org/acme/api/ClubResourceApiTest.java:60: error: illegal text block open delimiter sequence, missing line terminator
                .body("""{ "name": "Arandale FC", "budget": 100000000 }""")
                         ^
/Users/arun-joy.joseph/IdeaProjects/transfer-market/src/test/java/org/acme/api/ClubResourceApiTest.java:60: error: not a statement
                .body("""{ "name": "Arandale FC", "budget": 100000000 }""")
                           ^
/Users/arun-joy.joseph/IdeaProjects/transfer-market/src/test/java/org/acme/api/ClubResourceApiTest.java:60: error: ';' expected
                .body("""{ "name": "Arandale FC", "budget": 100000000 }""")
                                 ^
/Users/arun-joy.joseph/IdeaProjects/transfer-market/src/test/java/org/acme/api/ClubResourceApiTest.java:60: error: illegal text block open delimiter sequence, missing line terminator
                .body("""{ "name": "Arandale FC", "budget": 100000000 }""")
                                                                          ^
/Users/arun-joy.joseph/IdeaProjects/transfer-market/src/test/java/org/acme/api/PlayerResourceApiTest.java:66: error: illegal text block open delimiter sequence, missing line terminator
                .body("""{"name":"Ghost","price":1000,"clubId":99}""")
                         ^
/Users/arun-joy.joseph/IdeaProjects/transfer-market/src/test/java/org/acme/api/PlayerResourceApiTest.java:66: error: not a statement
                .body("""{"name":"Ghost","price":1000,"clubId":99}""")
                          ^
/Users/arun-joy.joseph/IdeaProjects/transfer-market/src/test/java/org/acme/api/PlayerResourceApiTest.java:66: error: ';' expected
                .body("""{"name":"Ghost","price":1000,"clubId":99}""")
                                ^
/Users/arun-joy.joseph/IdeaProjects/transfer-market/src/test/java/org/acme/api/PlayerResourceApiTest.java:66: error: illegal text block open delimiter sequence, missing line terminator
                .body("""{"name":"Ghost","price":1000,"clubId":99}""")
                                                                     ^
8 errors

[Incubating] Problems report is available at: file:///Users/arun-joy.joseph/IdeaProjects/transfer-market/build/reports/problems/problems-report.html

FAILURE: Build failed with an exception.

* What went wrong:
Execution failed for task ':compileTestJava'.
> Compilation failed; see the compiler output below.
  /Users/arun-joy.joseph/IdeaProjects/transfer-market/src/test/java/org/acme/api/ClubResourceApiTest.java:60: error: not a statement
                  .body("""{ "name": "Arandale FC", "budget": 100000000 }""")
                             ^
  /Users/arun-joy.joseph/IdeaProjects/transfer-market/src/test/java/org/acme/api/PlayerResourceApiTest.java:66: error: not a statement
                  .body("""{"name":"Ghost","price":1000,"clubId":99}""")
                            ^
  /Users/arun-joy.joseph/IdeaProjects/transfer-market/src/test/java/org/acme/api/ClubResourceApiTest.java:60: error: ';' expected
                  .body("""{ "name": "Arandale FC", "budget": 100000000 }""")
                                   ^
  /Users/arun-joy.joseph/IdeaProjects/transfer-market/src/test/java/org/acme/api/PlayerResourceApiTest.java:66: error: ';' expected
                  .body("""{"name":"Ghost","price":1000,"clubId":99}""")
                                  ^
  /Users/arun-joy.joseph/IdeaProjects/transfer-market/src/test/java/org/acme/api/ClubResourceApiTest.java:60: error: illegal text block open delimiter sequence, missing line terminator
                  .body("""{ "name": "Arandale FC", "budget": 100000000 }""")
                           ^
  /Users/arun-joy.joseph/IdeaProjects/transfer-market/src/test/java/org/acme/api/ClubResourceApiTest.java:60: error: illegal text block open delimiter sequence, missing line terminator
                  .body("""{ "name": "Arandale FC", "budget": 100000000 }""")
                                                                            ^
  /Users/arun-joy.joseph/IdeaProjects/transfer-market/src/test/java/org/acme/api/PlayerResourceApiTest.java:66: error: illegal text block open delimiter sequence, missing line terminator
                  .body("""{"name":"Ghost","price":1000,"clubId":99}""")
                           ^
  /Users/arun-joy.joseph/IdeaProjects/transfer-market/src/test/java/org/acme/api/PlayerResourceApiTest.java:66: error: illegal text block open delimiter sequence, missing line terminator
                  .body("""{"name":"Ghost","price":1000,"clubId":99}""")
                                                                       ^
  8 errors

* Try:
> Check your code and dependencies to fix the compilation error(s)
> Run with --scan to generate a Build Scan (Powered by Develocity).

Deprecated Gradle features were used in this build, making it incompatible with Gradle 10.

You can use '--warning-mode all' to show the individual deprecation warnings and determine if they come from your own scripts or plugins.

For more on this, please refer to https://docs.gradle.org/9.1.0/userguide/command_line_interface.html#sec:command_line_warnings in the Gradle documentation.

BUILD FAILED in 3m 22s
8 actionable tasks: 8 executed


1) src/test/java/org/acme/api/ClubResourceApiTest.java:

package org.acme.api;

import io.quarkus.panache.mock.PanacheMock;
import io.quarkus.test.junit.QuarkusTest;
import io.restassured.http.ContentType;
import org.acme.Club;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.math.BigDecimal;
import java.util.List;
import java.util.Map;
import java.util.Optional;

import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.*;
import static org.mockito.Mockito.when;

@QuarkusTest
class ClubResourceApiTest {

    @BeforeEach
    void setupMocks() {
        PanacheMock.mock(Club.class);  // Mock Panache static calls
    }

    @AfterEach
    void tearDownMocks() {
        PanacheMock.unmock(Club.class);
    }

    @Test
    void list_returns_clubs_from_panache() {
        Club c = new Club();
        c.id = 1L; c.name = "Arandale FC"; c.budget = new BigDecimal("100000000");
        when(Club.listAll()).thenReturn(List.of(c));

        given().accept(ContentType.JSON)
        .when().get("/clubs")
        .then().statusCode(200)
               .body("size()", is(1))
               .body("[0].id", is(1))
               .body("[0].name", is("Arandale FC"));
    }

    @Test
    void get_by_id_404_when_missing() {
        when(Club.findByIdOptional(999L)).thenReturn(Optional.empty());

        given().accept(ContentType.JSON)
        .when().get("/clubs/999")
        .then().statusCode(404);
    }

    @Test
    void create_valid_payload_persists_and_returns_201() {
        given().contentType(ContentType.JSON)
               .body(Map.of("name", "Arandale FC", "budget", 100000000))
        .when().post("/clubs")
        .then().statusCode(201)
               .contentType(ContentType.JSON)
               .body("name", is("Arandale FC"))
               .body("budget", is(100000000));
    }
}





src/test/java/org/acme/api/PlayerResourceApiTest.java:

package org.acme.api;

import io.quarkus.panache.mock.PanacheMock;
import io.quarkus.test.junit.QuarkusTest;
import io.restassured.http.ContentType;
import org.acme.Club;
import org.acme.Player;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.math.BigDecimal;
import java.util.List;
import java.util.Map;
import java.util.Optional;

import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.*;
import static org.mockito.Mockito.when;

@QuarkusTest
class PlayerResourceApiTest {

    @BeforeEach
    void setupMocks() {
        PanacheMock.mock(Player.class);
        PanacheMock.mock(Club.class);
    }

    @AfterEach
    void tearDownMocks() {
        PanacheMock.unmock(Player.class);
        PanacheMock.unmock(Club.class);
    }

    @Test
    void list_players_uses_panache_listAll() {
        Player p = new Player();
        p.id = 10L; p.name = "Luis Bento"; p.price = new BigDecimal("30000000");
        Club c = new Club(); c.id = 1L; p.club = c;

        when(Player.listAll()).thenReturn(List.of(p));

        given().accept(ContentType.JSON)
        .when().get("/players")
        .then().statusCode(200)
               .body("size()", is(1))
               .body("[0].id", is(10))
               .body("[0].name", is("Luis Bento"))
               .body("[0].clubId", is(1));
    }

    @Test
    void get_player_404_when_missing() {
        when(Player.findByIdOptional(123L)).thenReturn(Optional.empty());

        given().accept(ContentType.JSON)
        .when().get("/players/123")
        .then().statusCode(404);
    }

    @Test
    void create_player_with_unknown_club_fails() {
        when(Club.findByIdOptional(99L)).thenReturn(Optional.empty());

        given().contentType(ContentType.JSON)
               .body(Map.of("name", "Ghost", "price", 1000, "clubId", 99))
        .when().post("/players")
        .then().statusCode(anyOf(is(404), is(400)));
    }
}



src/test/java/org/acme/api/TransferResourceApiTest.java:

package org.acme.api;

import io.quarkus.test.junit.QuarkusMock;
import io.quarkus.test.junit.QuarkusTest;
import io.restassured.http.ContentType;
import org.acme.TransferService;
import org.acme.dto.TransferResult;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

import java.math.BigDecimal;
import java.util.Map;

import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.is;
import static org.mockito.ArgumentMatchers.anyLong;
import static org.mockito.Mockito.when;

@QuarkusTest
class TransferResourceApiTest {

    @BeforeEach
    void registerMock() {
        TransferService mock = Mockito.mock(TransferService.class);

        TransferResult r = new TransferResult();
        r.playerId = 1L; r.playerName = "Luis Bento";
        r.fromClub = "Arandale FC"; r.toClub = "Bristol Rovers 2.0";
        r.price = new BigDecimal("30000000");
        r.buyerBudgetAfter = new BigDecimal("15000000");
        r.sellerBudgetAfter = new BigDecimal("130000000");

        when(mock.transfer(anyLong(), anyLong())).thenReturn(r);
        QuarkusMock.installMockForType(mock, TransferService.class);
    }

    @Test
    void transfer_endpoint_returns_service_result() {
        given().contentType(ContentType.JSON)
               .body(Map.of("buyerClubId", 2, "playerId", 1))
        .when().post("/transfers")
        .then().statusCode(200)
               .contentType(ContentType.JSON)
               .body("playerId", is(1))
               .body("playerName", is("Luis Bento"))
               .body("toClub", is("Bristol Rovers 2.0"));
    }
}



src/test/java/org/acme/api/ClubResourceApiTest.java:

package org.acme.api;

import io.quarkus.panache.mock.PanacheMock;
import io.quarkus.test.junit.QuarkusTest;
import io.restassured.http.ContentType;
import org.acme.Club;
import org.junit.jupiter.api.Test;

import java.math.BigDecimal;
import java.util.List;
import java.util.Map;
import java.util.Optional;

import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.*;
import static org.mockito.Mockito.when;

@QuarkusTest
class ClubResourceApiTest {

    @Test
    void list_returns_clubs_from_panache() {
        PanacheMock.mock(Club.class); // enable static mocking for this test only
        try {
            Club c = new Club();
            c.id = 1L; c.name = "Arandale FC"; c.budget = new BigDecimal("100000000");
            when(Club.listAll()).thenReturn(List.of(c));

            given().accept(ContentType.JSON)
            .when().get("/clubs")
            .then().statusCode(200)
                   .body("size()", is(1))
                   .body("[0].id", is(1))
                   .body("[0].name", is("Arandale FC"));
        } finally {
            PanacheMock.reset();        // no-args reset
        }
    }

    @Test
    void get_by_id_404_when_missing() {
        PanacheMock.mock(Club.class);
        try {
            when(Club.findByIdOptional(999L)).thenReturn(Optional.empty());

            given().accept(ContentType.JSON)
            .when().get("/clubs/999")
            .then().statusCode(404);
        } finally {
            PanacheMock.reset();
        }
    }

    @Test
    void create_valid_payload_persists_and_returns_201() {
        // No mocking here — let it hit the real in-memory DB
        given().contentType(ContentType.JSON)
               .body(Map.of("name", "Arandale FC", "budget", 100_000_000))
        .when().post("/clubs")
        .then().statusCode(201)
               .contentType(ContentType.JSON)
               .body("name", is("Arandale FC"))
               .body("budget", is(100000000));
    }
}



src/test/java/org/acme/api/PlayerResourceApiTest.java:

package org.acme.api;

import io.quarkus.panache.mock.PanacheMock;
import io.quarkus.test.junit.QuarkusTest;
import io.restassured.http.ContentType;
import org.acme.Club;
import org.acme.Player;
import org.junit.jupiter.api.Test;

import java.math.BigDecimal;
import java.util.List;
import java.util.Map;
import java.util.Optional;

import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.*;
import static org.mockito.Mockito.when;

@QuarkusTest
class PlayerResourceApiTest {

    @Test
    void list_players_uses_panache_listAll() {
        PanacheMock.mock(Player.class);
        try {
            Player p = new Player();
            p.id = 10L; p.name = "Luis Bento"; p.price = new BigDecimal("30000000");
            Club c = new Club(); c.id = 1L; p.club = c;

            when(Player.listAll()).thenReturn(List.of(p));

            given().accept(ContentType.JSON)
            .when().get("/players")
            .then().statusCode(200)
                   .body("size()", is(1))
                   .body("[0].id", is(10))
                   .body("[0].name", is("Luis Bento"))
                   .body("[0].clubId", is(1));
        } finally {
            PanacheMock.reset();     // clears the mock
        }
    }

    @Test
    void get_player_404_when_missing() {
        PanacheMock.mock(Player.class);
        try {
            when(Player.findByIdOptional(123L)).thenReturn(Optional.empty());

            given().accept(ContentType.JSON)
            .when().get("/players/123")
            .then().statusCode(404);
        } finally {
            PanacheMock.reset();
        }
    }

    @Test
    void create_player_with_unknown_club_fails() {
        // For this validation path we need to mock the Club lookup only
        PanacheMock.mock(Club.class);
        try {
            when(Club.findByIdOptional(99L)).thenReturn(Optional.empty());

            given().contentType(ContentType.JSON)
                   .body(Map.of("name", "Ghost", "price", 1000, "clubId", 99))
            .when().post("/players")
            .then().statusCode(anyOf(is(404), is(400)));
        } finally {
            PanacheMock.reset();
        }
    }
}



➜  transfer-market git:(main) ✗ ./gradlew clean test
Unrecognized configuration key "quarkus.http.cors" was provided; it will be ignored; verify that the dependency extension for this configuration is set or that you did not make a typo
Unrecognized configuration key "quarkus.hibernate-orm.format-sql" was provided; it will be ignored; verify that the dependency extension for this configuration is set or that you did not make a typo
The "quarkus.hibernate-orm.database.generation" config property is deprecated and should not be used anymore.
HHH000247: ErrorCode: 23505, SQLState: 23505
Unique index or primary key violation: "PRIMARY KEY ON PUBLIC.CLUB(ID) ( /* key:1 */ 100000000.00, CAST(1 AS BIGINT), 'Arandale FC')"; SQL statement:
insert into Club (budget,name,id) values (?,?,?) [23505-230]
ARJUNA012125: TwoPhaseCoordinator.beforeCompletion - failed for SynchronizationImple< 0:ffffc0a80168:c436:68e5abbc:1, org.hibernate.resource.transaction.backend.jta.internal.synchronization.RegisteredSynchronization@6e8500d2 >
org.hibernate.exception.ConstraintViolationException: could not execute statement [Unique index or primary key violation: "PRIMARY KEY ON PUBLIC.CLUB(ID) ( /* key:1 */ 100000000.00, CAST(1 AS BIGINT), 'Arandale FC')"; SQL statement:
insert into Club (budget,name,id) values (?,?,?) [23505-230]] [insert into Club (budget,name,id) values (?,?,?)]
        at org.hibernate.dialect.H2Dialect.lambda$buildSQLExceptionConversionDelegate$1(H2Dialect.java:845)
        at org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:34)
        at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:115)
        at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:193)
        at org.hibernate.engine.jdbc.mutation.internal.AbstractMutationExecutor.performNonBatchedMutation(AbstractMutationExecutor.java:148)
        at org.hibernate.engine.jdbc.mutation.internal.MutationExecutorSingleNonBatched.performNonBatchedOperations(MutationExecutorSingleNonBatched.java:53)
        at org.hibernate.engine.jdbc.mutation.internal.AbstractMutationExecutor.execute(AbstractMutationExecutor.java:66)
        at org.hibernate.engine.jdbc.mutation.internal.AbstractMutationExecutor.execute(AbstractMutationExecutor.java:55)
        at org.hibernate.persister.entity.mutation.InsertCoordinatorStandard.doStaticInserts(InsertCoordinatorStandard.java:191)
        at org.hibernate.persister.entity.mutation.InsertCoordinatorStandard.coordinateInsert(InsertCoordinatorStandard.java:129)
        at org.hibernate.persister.entity.mutation.InsertCoordinatorStandard.insert(InsertCoordinatorStandard.java:101)
        at org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:113)
        at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:646)
        at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:513)
        at org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:378)
        at org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:39)
        at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:140)
        at org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1443)
        at org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:488)
        at org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:2321)
        at org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2029)
        at org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:394)
        at org.hibernate.resource.transaction.backend.jta.internal.JtaTransactionCoordinatorImpl.beforeCompletion(JtaTransactionCoordinatorImpl.java:328)
        at org.hibernate.resource.transaction.backend.jta.internal.synchronization.SynchronizationCallbackCoordinatorNonTrackingImpl.beforeCompletion(SynchronizationCallbackCoordinatorNonTrackingImpl.java:39)
        at org.hibernate.resource.transaction.backend.jta.internal.synchronization.RegisteredSynchronization.beforeCompletion(RegisteredSynchronization.java:33)
        at com.arjuna.ats.internal.jta.resources.arjunacore.SynchronizationImple.beforeCompletion(SynchronizationImple.java:52)
        at com.arjuna.ats.arjuna.coordinator.TwoPhaseCoordinator.beforeCompletion(TwoPhaseCoordinator.java:348)
        at com.arjuna.ats.arjuna.coordinator.TwoPhaseCoordinator.end(TwoPhaseCoordinator.java:66)
        at com.arjuna.ats.arjuna.AtomicAction.commit(AtomicAction.java:135)
        at com.arjuna.ats.internal.jta.transaction.arjunacore.TransactionImple.commitAndDisassociate(TransactionImple.java:1307)
        at com.arjuna.ats.internal.jta.transaction.arjunacore.BaseTransaction.commit(BaseTransaction.java:104)
        at io.quarkus.narayana.jta.runtime.NotifyingTransactionManager.commit(NotifyingTransactionManager.java:70)
        at io.quarkus.narayana.jta.runtime.interceptor.TransactionalInterceptorBase.endTransaction(TransactionalInterceptorBase.java:406)
        at io.quarkus.narayana.jta.runtime.interceptor.TransactionalInterceptorBase.invokeInOurTx(TransactionalInterceptorBase.java:171)
        at io.quarkus.narayana.jta.runtime.interceptor.TransactionalInterceptorBase.invokeInOurTx(TransactionalInterceptorBase.java:107)
        at io.quarkus.narayana.jta.runtime.interceptor.TransactionalInterceptorRequired.doIntercept(TransactionalInterceptorRequired.java:38)
        at io.quarkus.narayana.jta.runtime.interceptor.TransactionalInterceptorBase.intercept(TransactionalInterceptorBase.java:61)
        at io.quarkus.narayana.jta.runtime.interceptor.TransactionalInterceptorRequired.intercept(TransactionalInterceptorRequired.java:32)
        at io.quarkus.narayana.jta.runtime.interceptor.TransactionalInterceptorRequired_Bean.intercept(Unknown Source)
        at io.quarkus.arc.impl.InterceptorInvocation.invoke(InterceptorInvocation.java:42)
        at io.quarkus.arc.impl.AroundInvokeInvocationContext.perform(AroundInvokeInvocationContext.java:30)
        at io.quarkus.arc.impl.InvocationContexts.performAroundInvoke(InvocationContexts.java:27)
        at org.acme.ClubResource_Subclass.create(Unknown Source)
        at org.acme.ClubResource$quarkusrestinvoker$create_cca65a3766ba09b3426ebc5a4643f46fcd57af8e.invoke(Unknown Source)
        at org.jboss.resteasy.reactive.server.handlers.InvocationHandler.handle(InvocationHandler.java:29)
        at io.quarkus.resteasy.reactive.server.runtime.QuarkusResteasyReactiveRequestContext.invokeHandler(QuarkusResteasyReactiveRequestContext.java:183)
        at org.jboss.resteasy.reactive.common.core.AbstractResteasyReactiveContext.run(AbstractResteasyReactiveContext.java:147)
        at io.quarkus.vertx.core.runtime.VertxCoreRecorder$15.runWith(VertxCoreRecorder.java:645)
        at org.jboss.threads.EnhancedQueueExecutor$Task.doRunWith(EnhancedQueueExecutor.java:2651)
        at org.jboss.threads.EnhancedQueueExecutor$Task.run(EnhancedQueueExecutor.java:2630)
        at org.jboss.threads.EnhancedQueueExecutor.runThreadBody(EnhancedQueueExecutor.java:1622)
        at org.jboss.threads.EnhancedQueueExecutor$ThreadBody.run(EnhancedQueueExecutor.java:1589)
        at org.jboss.threads.DelegatingRunnable.run(DelegatingRunnable.java:11)
        at org.jboss.threads.ThreadLocalResettingRunnable.run(ThreadLocalResettingRunnable.java:11)
        at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
        at java.base@21.0.8/java.lang.Thread.run(Thread.java:1583)
Caused by: org.h2.jdbc.JdbcSQLIntegrityConstraintViolationException: Unique index or primary key violation: "PRIMARY KEY ON PUBLIC.CLUB(ID) ( /* key:1 */ 100000000.00, CAST(1 AS BIGINT), 'Arandale FC')"; SQL statement:
insert into Club (budget,name,id) values (?,?,?) [23505-230]
        at app//org.h2.message.DbException.getJdbcSQLException(DbException.java:520)
        at app//org.h2.message.DbException.getJdbcSQLException(DbException.java:489)
        at app//org.h2.message.DbException.get(DbException.java:223)
        at app//org.h2.message.DbException.get(DbException.java:199)
        at app//org.h2.mvstore.db.MVPrimaryIndex.add(MVPrimaryIndex.java:121)
        at app//org.h2.mvstore.db.MVTable.addRow(MVTable.java:518)
        at app//org.h2.command.dml.Insert.insertRows(Insert.java:174)
        at app//org.h2.command.dml.Insert.update(Insert.java:135)
        at app//org.h2.command.dml.DataChangeStatement.update(DataChangeStatement.java:74)
        at app//org.h2.command.CommandContainer.update(CommandContainer.java:139)
        at app//org.h2.command.Command.executeUpdate(Command.java:304)
        at app//org.h2.command.Command.executeUpdate(Command.java:248)
        at app//org.h2.jdbc.JdbcPreparedStatement.executeUpdateInternal(JdbcPreparedStatement.java:213)
        at app//org.h2.jdbc.JdbcPreparedStatement.executeUpdate(JdbcPreparedStatement.java:172)
        at io.agroal.pool.wrapper.PreparedStatementWrapper.executeUpdate(PreparedStatementWrapper.java:90)
        at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:190)
        ... 52 more
HTTP Request to /clubs failed, error id: 7de916da-b21e-4661-bf50-0b3c09763530-1
io.quarkus.arc.ArcUndeclaredThrowableException: Error invoking subclass method
        at org.acme.ClubResource_Subclass.create(Unknown Source)
        at org.acme.ClubResource$quarkusrestinvoker$create_cca65a3766ba09b3426ebc5a4643f46fcd57af8e.invoke(Unknown Source)
        at org.jboss.resteasy.reactive.server.handlers.InvocationHandler.handle(InvocationHandler.java:29)
        at io.quarkus.resteasy.reactive.server.runtime.QuarkusResteasyReactiveRequestContext.invokeHandler(QuarkusResteasyReactiveRequestContext.java:183)
        at org.jboss.resteasy.reactive.common.core.AbstractResteasyReactiveContext.run(AbstractResteasyReactiveContext.java:147)
        at io.quarkus.vertx.core.runtime.VertxCoreRecorder$15.runWith(VertxCoreRecorder.java:645)
        at org.jboss.threads.EnhancedQueueExecutor$Task.doRunWith(EnhancedQueueExecutor.java:2651)
        at org.jboss.threads.EnhancedQueueExecutor$Task.run(EnhancedQueueExecutor.java:2630)
        at org.jboss.threads.EnhancedQueueExecutor.runThreadBody(EnhancedQueueExecutor.java:1622)
        at org.jboss.threads.EnhancedQueueExecutor$ThreadBody.run(EnhancedQueueExecutor.java:1589)
        at org.jboss.threads.DelegatingRunnable.run(DelegatingRunnable.java:11)
        at org.jboss.threads.ThreadLocalResettingRunnable.run(ThreadLocalResettingRunnable.java:11)
        at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
        at java.base@21.0.8/java.lang.Thread.run(Thread.java:1583)
Caused by: jakarta.transaction.RollbackException: ARJUNA016053: Could not commit transaction.
        at com.arjuna.ats.internal.jta.transaction.arjunacore.TransactionImple.commitAndDisassociate(TransactionImple.java:1319)
        at com.arjuna.ats.internal.jta.transaction.arjunacore.BaseTransaction.commit(BaseTransaction.java:104)
        at io.quarkus.narayana.jta.runtime.NotifyingTransactionManager.commit(NotifyingTransactionManager.java:70)
        at io.quarkus.narayana.jta.runtime.interceptor.TransactionalInterceptorBase.endTransaction(TransactionalInterceptorBase.java:406)
        at io.quarkus.narayana.jta.runtime.interceptor.TransactionalInterceptorBase.invokeInOurTx(TransactionalInterceptorBase.java:171)
        at io.quarkus.narayana.jta.runtime.interceptor.TransactionalInterceptorBase.invokeInOurTx(TransactionalInterceptorBase.java:107)
        at io.quarkus.narayana.jta.runtime.interceptor.TransactionalInterceptorRequired.doIntercept(TransactionalInterceptorRequired.java:38)
        at io.quarkus.narayana.jta.runtime.interceptor.TransactionalInterceptorBase.intercept(TransactionalInterceptorBase.java:61)
        at io.quarkus.narayana.jta.runtime.interceptor.TransactionalInterceptorRequired.intercept(TransactionalInterceptorRequired.java:32)
        at io.quarkus.narayana.jta.runtime.interceptor.TransactionalInterceptorRequired_Bean.intercept(Unknown Source)
        at io.quarkus.arc.impl.InterceptorInvocation.invoke(InterceptorInvocation.java:42)
        at io.quarkus.arc.impl.AroundInvokeInvocationContext.perform(AroundInvokeInvocationContext.java:30)
        at io.quarkus.arc.impl.InvocationContexts.performAroundInvoke(InvocationContexts.java:27)
        ... 14 more
Caused by: org.hibernate.exception.ConstraintViolationException: could not execute statement [Unique index or primary key violation: "PRIMARY KEY ON PUBLIC.CLUB(ID) ( /* key:1 */ 100000000.00, CAST(1 AS BIGINT), 'Arandale FC')"; SQL statement:
insert into Club (budget,name,id) values (?,?,?) [23505-230]] [insert into Club (budget,name,id) values (?,?,?)]
        at org.hibernate.dialect.H2Dialect.lambda$buildSQLExceptionConversionDelegate$1(H2Dialect.java:845)
        at org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:34)
        at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:115)
        at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:193)
        at org.hibernate.engine.jdbc.mutation.internal.AbstractMutationExecutor.performNonBatchedMutation(AbstractMutationExecutor.java:148)
        at org.hibernate.engine.jdbc.mutation.internal.MutationExecutorSingleNonBatched.performNonBatchedOperations(MutationExecutorSingleNonBatched.java:53)
        at org.hibernate.engine.jdbc.mutation.internal.AbstractMutationExecutor.execute(AbstractMutationExecutor.java:66)
        at org.hibernate.engine.jdbc.mutation.internal.AbstractMutationExecutor.execute(AbstractMutationExecutor.java:55)
        at org.hibernate.persister.entity.mutation.InsertCoordinatorStandard.doStaticInserts(InsertCoordinatorStandard.java:191)
        at org.hibernate.persister.entity.mutation.InsertCoordinatorStandard.coordinateInsert(InsertCoordinatorStandard.java:129)
        at org.hibernate.persister.entity.mutation.InsertCoordinatorStandard.insert(InsertCoordinatorStandard.java:101)
        at org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:113)
        at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:646)
        at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:513)
        at org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:378)
        at org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:39)
        at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:140)
        at org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1443)
        at org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:488)
        at org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:2321)
        at org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2029)
        at org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:394)
        at org.hibernate.resource.transaction.backend.jta.internal.JtaTransactionCoordinatorImpl.beforeCompletion(JtaTransactionCoordinatorImpl.java:328)
        at org.hibernate.resource.transaction.backend.jta.internal.synchronization.SynchronizationCallbackCoordinatorNonTrackingImpl.beforeCompletion(SynchronizationCallbackCoordinatorNonTrackingImpl.java:39)
        at org.hibernate.resource.transaction.backend.jta.internal.synchronization.RegisteredSynchronization.beforeCompletion(RegisteredSynchronization.java:33)
        at com.arjuna.ats.internal.jta.resources.arjunacore.SynchronizationImple.beforeCompletion(SynchronizationImple.java:52)
        at com.arjuna.ats.arjuna.coordinator.TwoPhaseCoordinator.beforeCompletion(TwoPhaseCoordinator.java:348)
        at com.arjuna.ats.arjuna.coordinator.TwoPhaseCoordinator.end(TwoPhaseCoordinator.java:66)
        at com.arjuna.ats.arjuna.AtomicAction.commit(AtomicAction.java:135)
        at com.arjuna.ats.internal.jta.transaction.arjunacore.TransactionImple.commitAndDisassociate(TransactionImple.java:1307)
        ... 26 more
Caused by: org.h2.jdbc.JdbcSQLIntegrityConstraintViolationException: Unique index or primary key violation: "PRIMARY KEY ON PUBLIC.CLUB(ID) ( /* key:1 */ 100000000.00, CAST(1 AS BIGINT), 'Arandale FC')"; SQL statement:
insert into Club (budget,name,id) values (?,?,?) [23505-230]
        at app//org.h2.message.DbException.getJdbcSQLException(DbException.java:520)
        at app//org.h2.message.DbException.getJdbcSQLException(DbException.java:489)
        at app//org.h2.message.DbException.get(DbException.java:223)
        at app//org.h2.message.DbException.get(DbException.java:199)
        at app//org.h2.mvstore.db.MVPrimaryIndex.add(MVPrimaryIndex.java:121)
        at app//org.h2.mvstore.db.MVTable.addRow(MVTable.java:518)
        at app//org.h2.command.dml.Insert.insertRows(Insert.java:174)
        at app//org.h2.command.dml.Insert.update(Insert.java:135)
        at app//org.h2.command.dml.DataChangeStatement.update(DataChangeStatement.java:74)
        at app//org.h2.command.CommandContainer.update(CommandContainer.java:139)
        at app//org.h2.command.Command.executeUpdate(Command.java:304)
        at app//org.h2.command.Command.executeUpdate(Command.java:248)
        at app//org.h2.jdbc.JdbcPreparedStatement.executeUpdateInternal(JdbcPreparedStatement.java:213)
        at app//org.h2.jdbc.JdbcPreparedStatement.executeUpdate(JdbcPreparedStatement.java:172)
        at io.agroal.pool.wrapper.PreparedStatementWrapper.executeUpdate(PreparedStatementWrapper.java:90)
        at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:190)
        ... 52 more

> Task :test

ClubResourceApiTest > create_valid_payload_persists_and_returns_201() FAILED
    java.lang.AssertionError at ClubResourceApiTest.java:60

OpenJDK 64-Bit Server VM warning: Sharing is only supported for boot loader classes because bootstrap classpath has been appended

> Task :test FAILED

12 tests completed, 1 failed

[Incubating] Problems report is available at: file:///Users/arun-joy.joseph/IdeaProjects/transfer-market/build/reports/problems/problems-report.html

FAILURE: Build failed with an exception.

* What went wrong:
Execution failed for task ':test'.
> There were failing tests. See the report at: file:///Users/arun-joy.joseph/IdeaProjects/transfer-market/build/reports/tests/test/index.html

* Try:
> Run with --scan to generate a Build Scan (Powered by Develocity).

Deprecated Gradle features were used in this build, making it incompatible with Gradle 10.

You can use '--warning-mode all' to show the individual deprecation warnings and determine if they come from your own scripts or plugins.

For more on this, please refer to https://docs.gradle.org/9.1.0/userguide/command_line_interface.html#sec:command_line_warnings in the Gradle documentation.

BUILD FAILED in 2m 8s
9 actionable tasks: 9 executed





# --- HTTP & DB ---
quarkus.http.cors.enabled=true

quarkus.datasource.db-kind=h2
quarkus.datasource.jdbc.url=jdbc:h2:mem:transferdb;DB_CLOSE_DELAY=-1
quarkus.datasource.username=sa
quarkus.datasource.password=sa

# --- Hibernate ORM (current keys) ---
quarkus.hibernate-orm.schema.generation=drop-and-create
quarkus.hibernate-orm.log.sql=true
quarkus.hibernate-orm.log.format-sql=true

# --- Seed only in dev/test-base, then turn it off in test profile ---
quarkus.hibernate-orm.sql-load-script=import.sql
%test.quarkus.hibernate-orm.sql-load-script=no-file



➜  transfer-market git:(main) ✗ ./gradlew clean test
Unrecognized configuration key "quarkus.http.cors" was provided; it will be ignored; verify that the dependency extension for this configuration is set or that you did not make a typo
Unrecognized configuration key "quarkus.hibernate-orm.format-sql" was provided; it will be ignored; verify that the dependency extension for this configuration is set or that you did not make a typo
The "quarkus.hibernate-orm.database.generation" config property is deprecated and should not be used anymore.
HHH000247: ErrorCode: 23505, SQLState: 23505
Unique index or primary key violation: "PRIMARY KEY ON PUBLIC.CLUB(ID) ( /* key:1 */ 100000000.00, CAST(1 AS BIGINT), 'Arandale FC')"; SQL statement:
insert into Club (budget,name,id) values (?,?,?) [23505-230]
ARJUNA012125: TwoPhaseCoordinator.beforeCompletion - failed for SynchronizationImple< 0:ffffc0a80168:e7ec:68e5adbe:1, org.hibernate.resource.transaction.backend.jta.internal.synchronization.RegisteredSynchronization@28b37d76 >
org.hibernate.exception.ConstraintViolationException: could not execute statement [Unique index or primary key violation: "PRIMARY KEY ON PUBLIC.CLUB(ID) ( /* key:1 */ 100000000.00, CAST(1 AS BIGINT), 'Arandale FC')"; SQL statement:
insert into Club (budget,name,id) values (?,?,?) [23505-230]] [insert into Club (budget,name,id) values (?,?,?)]
        at org.hibernate.dialect.H2Dialect.lambda$buildSQLExceptionConversionDelegate$1(H2Dialect.java:845)
        at org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:34)
        at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:115)
        at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:193)
        at org.hibernate.engine.jdbc.mutation.internal.AbstractMutationExecutor.performNonBatchedMutation(AbstractMutationExecutor.java:148)
        at org.hibernate.engine.jdbc.mutation.internal.MutationExecutorSingleNonBatched.performNonBatchedOperations(MutationExecutorSingleNonBatched.java:53)
        at org.hibernate.engine.jdbc.mutation.internal.AbstractMutationExecutor.execute(AbstractMutationExecutor.java:66)
        at org.hibernate.engine.jdbc.mutation.internal.AbstractMutationExecutor.execute(AbstractMutationExecutor.java:55)
        at org.hibernate.persister.entity.mutation.InsertCoordinatorStandard.doStaticInserts(InsertCoordinatorStandard.java:191)
        at org.hibernate.persister.entity.mutation.InsertCoordinatorStandard.coordinateInsert(InsertCoordinatorStandard.java:129)
        at org.hibernate.persister.entity.mutation.InsertCoordinatorStandard.insert(InsertCoordinatorStandard.java:101)
        at org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:113)
        at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:646)
        at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:513)
        at org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:378)
        at org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:39)
        at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:140)
        at org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1443)
        at org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:488)
        at org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:2321)
        at org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2029)
        at org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:394)
        at org.hibernate.resource.transaction.backend.jta.internal.JtaTransactionCoordinatorImpl.beforeCompletion(JtaTransactionCoordinatorImpl.java:328)
        at org.hibernate.resource.transaction.backend.jta.internal.synchronization.SynchronizationCallbackCoordinatorNonTrackingImpl.beforeCompletion(SynchronizationCallbackCoordinatorNonTrackingImpl.java:39)
        at org.hibernate.resource.transaction.backend.jta.internal.synchronization.RegisteredSynchronization.beforeCompletion(RegisteredSynchronization.java:33)
        at com.arjuna.ats.internal.jta.resources.arjunacore.SynchronizationImple.beforeCompletion(SynchronizationImple.java:52)
        at com.arjuna.ats.arjuna.coordinator.TwoPhaseCoordinator.beforeCompletion(TwoPhaseCoordinator.java:348)
        at com.arjuna.ats.arjuna.coordinator.TwoPhaseCoordinator.end(TwoPhaseCoordinator.java:66)
        at com.arjuna.ats.arjuna.AtomicAction.commit(AtomicAction.java:135)
        at com.arjuna.ats.internal.jta.transaction.arjunacore.TransactionImple.commitAndDisassociate(TransactionImple.java:1307)
        at com.arjuna.ats.internal.jta.transaction.arjunacore.BaseTransaction.commit(BaseTransaction.java:104)
        at io.quarkus.narayana.jta.runtime.NotifyingTransactionManager.commit(NotifyingTransactionManager.java:70)
        at io.quarkus.narayana.jta.runtime.interceptor.TransactionalInterceptorBase.endTransaction(TransactionalInterceptorBase.java:406)
        at io.quarkus.narayana.jta.runtime.interceptor.TransactionalInterceptorBase.invokeInOurTx(TransactionalInterceptorBase.java:171)
        at io.quarkus.narayana.jta.runtime.interceptor.TransactionalInterceptorBase.invokeInOurTx(TransactionalInterceptorBase.java:107)
        at io.quarkus.narayana.jta.runtime.interceptor.TransactionalInterceptorRequired.doIntercept(TransactionalInterceptorRequired.java:38)
        at io.quarkus.narayana.jta.runtime.interceptor.TransactionalInterceptorBase.intercept(TransactionalInterceptorBase.java:61)
        at io.quarkus.narayana.jta.runtime.interceptor.TransactionalInterceptorRequired.intercept(TransactionalInterceptorRequired.java:32)
        at io.quarkus.narayana.jta.runtime.interceptor.TransactionalInterceptorRequired_Bean.intercept(Unknown Source)
        at io.quarkus.arc.impl.InterceptorInvocation.invoke(InterceptorInvocation.java:42)
        at io.quarkus.arc.impl.AroundInvokeInvocationContext.perform(AroundInvokeInvocationContext.java:30)
        at io.quarkus.arc.impl.InvocationContexts.performAroundInvoke(InvocationContexts.java:27)
        at org.acme.ClubResource_Subclass.create(Unknown Source)
        at org.acme.ClubResource$quarkusrestinvoker$create_cca65a3766ba09b3426ebc5a4643f46fcd57af8e.invoke(Unknown Source)
        at org.jboss.resteasy.reactive.server.handlers.InvocationHandler.handle(InvocationHandler.java:29)
        at io.quarkus.resteasy.reactive.server.runtime.QuarkusResteasyReactiveRequestContext.invokeHandler(QuarkusResteasyReactiveRequestContext.java:183)
        at org.jboss.resteasy.reactive.common.core.AbstractResteasyReactiveContext.run(AbstractResteasyReactiveContext.java:147)
        at io.quarkus.vertx.core.runtime.VertxCoreRecorder$15.runWith(VertxCoreRecorder.java:645)
        at org.jboss.threads.EnhancedQueueExecutor$Task.doRunWith(EnhancedQueueExecutor.java:2651)
        at org.jboss.threads.EnhancedQueueExecutor$Task.run(EnhancedQueueExecutor.java:2630)
        at org.jboss.threads.EnhancedQueueExecutor.runThreadBody(EnhancedQueueExecutor.java:1622)
        at org.jboss.threads.EnhancedQueueExecutor$ThreadBody.run(EnhancedQueueExecutor.java:1589)
        at org.jboss.threads.DelegatingRunnable.run(DelegatingRunnable.java:11)
        at org.jboss.threads.ThreadLocalResettingRunnable.run(ThreadLocalResettingRunnable.java:11)
        at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
        at java.base@21.0.8/java.lang.Thread.run(Thread.java:1583)
Caused by: org.h2.jdbc.JdbcSQLIntegrityConstraintViolationException: Unique index or primary key violation: "PRIMARY KEY ON PUBLIC.CLUB(ID) ( /* key:1 */ 100000000.00, CAST(1 AS BIGINT), 'Arandale FC')"; SQL statement:
insert into Club (budget,name,id) values (?,?,?) [23505-230]
        at app//org.h2.message.DbException.getJdbcSQLException(DbException.java:520)
        at app//org.h2.message.DbException.getJdbcSQLException(DbException.java:489)
        at app//org.h2.message.DbException.get(DbException.java:223)
        at app//org.h2.message.DbException.get(DbException.java:199)
        at app//org.h2.mvstore.db.MVPrimaryIndex.add(MVPrimaryIndex.java:121)
        at app//org.h2.mvstore.db.MVTable.addRow(MVTable.java:518)
        at app//org.h2.command.dml.Insert.insertRows(Insert.java:174)
        at app//org.h2.command.dml.Insert.update(Insert.java:135)
        at app//org.h2.command.dml.DataChangeStatement.update(DataChangeStatement.java:74)
        at app//org.h2.command.CommandContainer.update(CommandContainer.java:139)
        at app//org.h2.command.Command.executeUpdate(Command.java:304)
        at app//org.h2.command.Command.executeUpdate(Command.java:248)
        at app//org.h2.jdbc.JdbcPreparedStatement.executeUpdateInternal(JdbcPreparedStatement.java:213)
        at app//org.h2.jdbc.JdbcPreparedStatement.executeUpdate(JdbcPreparedStatement.java:172)
        at io.agroal.pool.wrapper.PreparedStatementWrapper.executeUpdate(PreparedStatementWrapper.java:90)
        at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:190)
        ... 52 more
HTTP Request to /clubs failed, error id: c2afbc55-d7c6-4dfe-91f1-c8abe872fe26-1
io.quarkus.arc.ArcUndeclaredThrowableException: Error invoking subclass method
        at org.acme.ClubResource_Subclass.create(Unknown Source)
        at org.acme.ClubResource$quarkusrestinvoker$create_cca65a3766ba09b3426ebc5a4643f46fcd57af8e.invoke(Unknown Source)
        at org.jboss.resteasy.reactive.server.handlers.InvocationHandler.handle(InvocationHandler.java:29)
        at io.quarkus.resteasy.reactive.server.runtime.QuarkusResteasyReactiveRequestContext.invokeHandler(QuarkusResteasyReactiveRequestContext.java:183)
        at org.jboss.resteasy.reactive.common.core.AbstractResteasyReactiveContext.run(AbstractResteasyReactiveContext.java:147)
        at io.quarkus.vertx.core.runtime.VertxCoreRecorder$15.runWith(VertxCoreRecorder.java:645)
        at org.jboss.threads.EnhancedQueueExecutor$Task.doRunWith(EnhancedQueueExecutor.java:2651)
        at org.jboss.threads.EnhancedQueueExecutor$Task.run(EnhancedQueueExecutor.java:2630)
        at org.jboss.threads.EnhancedQueueExecutor.runThreadBody(EnhancedQueueExecutor.java:1622)
        at org.jboss.threads.EnhancedQueueExecutor$ThreadBody.run(EnhancedQueueExecutor.java:1589)
        at org.jboss.threads.DelegatingRunnable.run(DelegatingRunnable.java:11)
        at org.jboss.threads.ThreadLocalResettingRunnable.run(ThreadLocalResettingRunnable.java:11)
        at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
        at java.base@21.0.8/java.lang.Thread.run(Thread.java:1583)
Caused by: jakarta.transaction.RollbackException: ARJUNA016053: Could not commit transaction.
        at com.arjuna.ats.internal.jta.transaction.arjunacore.TransactionImple.commitAndDisassociate(TransactionImple.java:1319)
        at com.arjuna.ats.internal.jta.transaction.arjunacore.BaseTransaction.commit(BaseTransaction.java:104)
        at io.quarkus.narayana.jta.runtime.NotifyingTransactionManager.commit(NotifyingTransactionManager.java:70)
        at io.quarkus.narayana.jta.runtime.interceptor.TransactionalInterceptorBase.endTransaction(TransactionalInterceptorBase.java:406)
        at io.quarkus.narayana.jta.runtime.interceptor.TransactionalInterceptorBase.invokeInOurTx(TransactionalInterceptorBase.java:171)
        at io.quarkus.narayana.jta.runtime.interceptor.TransactionalInterceptorBase.invokeInOurTx(TransactionalInterceptorBase.java:107)
        at io.quarkus.narayana.jta.runtime.interceptor.TransactionalInterceptorRequired.doIntercept(TransactionalInterceptorRequired.java:38)
        at io.quarkus.narayana.jta.runtime.interceptor.TransactionalInterceptorBase.intercept(TransactionalInterceptorBase.java:61)
        at io.quarkus.narayana.jta.runtime.interceptor.TransactionalInterceptorRequired.intercept(TransactionalInterceptorRequired.java:32)
        at io.quarkus.narayana.jta.runtime.interceptor.TransactionalInterceptorRequired_Bean.intercept(Unknown Source)
        at io.quarkus.arc.impl.InterceptorInvocation.invoke(InterceptorInvocation.java:42)
        at io.quarkus.arc.impl.AroundInvokeInvocationContext.perform(AroundInvokeInvocationContext.java:30)
        at io.quarkus.arc.impl.InvocationContexts.performAroundInvoke(InvocationContexts.java:27)
        ... 14 more
Caused by: org.hibernate.exception.ConstraintViolationException: could not execute statement [Unique index or primary key violation: "PRIMARY KEY ON PUBLIC.CLUB(ID) ( /* key:1 */ 100000000.00, CAST(1 AS BIGINT), 'Arandale FC')"; SQL statement:
insert into Club (budget,name,id) values (?,?,?) [23505-230]] [insert into Club (budget,name,id) values (?,?,?)]
        at org.hibernate.dialect.H2Dialect.lambda$buildSQLExceptionConversionDelegate$1(H2Dialect.java:845)
        at org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:34)
        at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:115)
        at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:193)
        at org.hibernate.engine.jdbc.mutation.internal.AbstractMutationExecutor.performNonBatchedMutation(AbstractMutationExecutor.java:148)
        at org.hibernate.engine.jdbc.mutation.internal.MutationExecutorSingleNonBatched.performNonBatchedOperations(MutationExecutorSingleNonBatched.java:53)
        at org.hibernate.engine.jdbc.mutation.internal.AbstractMutationExecutor.execute(AbstractMutationExecutor.java:66)
        at org.hibernate.engine.jdbc.mutation.internal.AbstractMutationExecutor.execute(AbstractMutationExecutor.java:55)
        at org.hibernate.persister.entity.mutation.InsertCoordinatorStandard.doStaticInserts(InsertCoordinatorStandard.java:191)
        at org.hibernate.persister.entity.mutation.InsertCoordinatorStandard.coordinateInsert(InsertCoordinatorStandard.java:129)
        at org.hibernate.persister.entity.mutation.InsertCoordinatorStandard.insert(InsertCoordinatorStandard.java:101)
        at org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:113)
        at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:646)
        at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:513)
        at org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:378)
        at org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:39)
        at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:140)
        at org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1443)
        at org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:488)
        at org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:2321)
        at org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2029)
        at org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:394)
        at org.hibernate.resource.transaction.backend.jta.internal.JtaTransactionCoordinatorImpl.beforeCompletion(JtaTransactionCoordinatorImpl.java:328)
        at org.hibernate.resource.transaction.backend.jta.internal.synchronization.SynchronizationCallbackCoordinatorNonTrackingImpl.beforeCompletion(SynchronizationCallbackCoordinatorNonTrackingImpl.java:39)
        at org.hibernate.resource.transaction.backend.jta.internal.synchronization.RegisteredSynchronization.beforeCompletion(RegisteredSynchronization.java:33)
        at com.arjuna.ats.internal.jta.resources.arjunacore.SynchronizationImple.beforeCompletion(SynchronizationImple.java:52)
        at com.arjuna.ats.arjuna.coordinator.TwoPhaseCoordinator.beforeCompletion(TwoPhaseCoordinator.java:348)
        at com.arjuna.ats.arjuna.coordinator.TwoPhaseCoordinator.end(TwoPhaseCoordinator.java:66)
        at com.arjuna.ats.arjuna.AtomicAction.commit(AtomicAction.java:135)
        at com.arjuna.ats.internal.jta.transaction.arjunacore.TransactionImple.commitAndDisassociate(TransactionImple.java:1307)
        ... 26 more
Caused by: org.h2.jdbc.JdbcSQLIntegrityConstraintViolationException: Unique index or primary key violation: "PRIMARY KEY ON PUBLIC.CLUB(ID) ( /* key:1 */ 100000000.00, CAST(1 AS BIGINT), 'Arandale FC')"; SQL statement:
insert into Club (budget,name,id) values (?,?,?) [23505-230]
        at app//org.h2.message.DbException.getJdbcSQLException(DbException.java:520)
        at app//org.h2.message.DbException.getJdbcSQLException(DbException.java:489)
        at app//org.h2.message.DbException.get(DbException.java:223)
        at app//org.h2.message.DbException.get(DbException.java:199)
        at app//org.h2.mvstore.db.MVPrimaryIndex.add(MVPrimaryIndex.java:121)
        at app//org.h2.mvstore.db.MVTable.addRow(MVTable.java:518)
        at app//org.h2.command.dml.Insert.insertRows(Insert.java:174)
        at app//org.h2.command.dml.Insert.update(Insert.java:135)
        at app//org.h2.command.dml.DataChangeStatement.update(DataChangeStatement.java:74)
        at app//org.h2.command.CommandContainer.update(CommandContainer.java:139)
        at app//org.h2.command.Command.executeUpdate(Command.java:304)
        at app//org.h2.command.Command.executeUpdate(Command.java:248)
        at app//org.h2.jdbc.JdbcPreparedStatement.executeUpdateInternal(JdbcPreparedStatement.java:213)
        at app//org.h2.jdbc.JdbcPreparedStatement.executeUpdate(JdbcPreparedStatement.java:172)
        at io.agroal.pool.wrapper.PreparedStatementWrapper.executeUpdate(PreparedStatementWrapper.java:90)
        at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:190)
        ... 52 more

> Task :test

ClubResourceApiTest > create_valid_payload_persists_and_returns_201() FAILED
    java.lang.AssertionError at ClubResourceApiTest.java:60

OpenJDK 64-Bit Server VM warning: Sharing is only supported for boot loader classes because bootstrap classpath has been appended

> Task :test FAILED

12 tests completed, 1 failed

[Incubating] Problems report is available at: file:///Users/arun-joy.joseph/IdeaProjects/transfer-market/build/reports/problems/problems-report.html

FAILURE: Build failed with an exception.

* What went wrong:
Execution failed for task ':test'.
> There were failing tests. See the report at: file:///Users/arun-joy.joseph/IdeaProjects/transfer-market/build/reports/tests/test/index.html

* Try:
> Run with --scan to generate a Build Scan (Powered by Develocity).

Deprecated Gradle features were used in this build, making it incompatible with Gradle 10.

You can use '--warning-mode all' to show the individual deprecation warnings and determine if they come from your own scripts or plugins.

For more on this, please refer to https://docs.gradle.org/9.1.0/userguide/command_line_interface.html#sec:command_line_warnings in the Gradle documentation.

BUILD FAILED in 2m
9 actionable tasks: 9 executed





➜  transfer-market git:(main) ✗ ./gradlew clean test
Unrecognized configuration key "quarkus.hibernate-orm.schema.generation" was provided; it will be ignored; verify that the dependency extension for this configuration is set or that you did not make a typo
HHH000247: ErrorCode: 90036, SQLState: 90036
Sequence "CLUB_SEQ" not found; SQL statement:
select next value for Club_SEQ [90036-230]
HTTP Request to /clubs failed, error id: a50d1ea7-644b-46fd-9af4-4b9082ebbadd-1
org.hibernate.exception.SQLGrammarException: Could not prepare statement [Sequence "CLUB_SEQ" not found; SQL statement:
select next value for Club_SEQ [90036-230]] [select next value for Club_SEQ]
        at org.hibernate.exception.internal.SQLExceptionTypeDelegate.convert(SQLExceptionTypeDelegate.java:64)
        at org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:34)
        at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:115)
        at org.hibernate.engine.jdbc.internal.StatementPreparerImpl$StatementPreparationTemplate.prepareStatement(StatementPreparerImpl.java:198)
        at org.hibernate.engine.jdbc.internal.StatementPreparerImpl.prepareStatement(StatementPreparerImpl.java:88)
        at org.hibernate.engine.jdbc.internal.StatementPreparerImpl.prepareStatement(StatementPreparerImpl.java:82)
        at org.hibernate.id.enhanced.SequenceStructure$1.getNextValue(SequenceStructure.java:111)
        at org.hibernate.id.enhanced.PooledLoOptimizer.generate(PooledLoOptimizer.java:67)
        at org.hibernate.id.enhanced.SequenceStyleGenerator.generate(SequenceStyleGenerator.java:533)
        at org.hibernate.id.IdentifierGenerator.generate(IdentifierGenerator.java:135)
        at org.hibernate.event.internal.AbstractSaveEventListener.generateId(AbstractSaveEventListener.java:158)
        at org.hibernate.event.internal.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:123)
        at org.hibernate.event.internal.DefaultPersistEventListener.entityIsTransient(DefaultPersistEventListener.java:148)
        at org.hibernate.event.internal.DefaultPersistEventListener.persist(DefaultPersistEventListener.java:92)
        at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:76)
        at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:52)
        at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:140)
        at org.hibernate.internal.SessionImpl.firePersist(SessionImpl.java:692)
        at org.hibernate.internal.SessionImpl.persist(SessionImpl.java:676)
        at io.quarkus.hibernate.orm.runtime.session.TransactionScopedSession.persist(TransactionScopedSession.java:167)
        at org.hibernate.engine.spi.SessionLazyDelegator.persist(SessionLazyDelegator.java:221)
        at org.hibernate.Session_QdxvhYUzh5cgfepxgL43K9-OFvU_Synthetic_ClientProxy.persist(Unknown Source)
        at io.quarkus.hibernate.orm.panache.common.runtime.AbstractJpaOperations.persist(AbstractJpaOperations.java:105)
        at io.quarkus.hibernate.orm.panache.common.runtime.AbstractJpaOperations.persist(AbstractJpaOperations.java:100)
        at io.quarkus.hibernate.orm.panache.PanacheEntityBase.persist(PanacheEntityBase.java:65)
        at org.acme.ClubResource.create(ClubResource.java:42)
        at org.acme.ClubResource_Subclass.create$$superforward(Unknown Source)
        at org.acme.ClubResource_Subclass$$function$$1.apply(Unknown Source)
        at io.quarkus.arc.impl.AroundInvokeInvocationContext.proceed(AroundInvokeInvocationContext.java:73)
        at io.quarkus.arc.impl.AroundInvokeInvocationContext.proceed(AroundInvokeInvocationContext.java:62)
        at io.quarkus.narayana.jta.runtime.interceptor.TransactionalInterceptorBase.invokeInOurTx(TransactionalInterceptorBase.java:136)
        at io.quarkus.narayana.jta.runtime.interceptor.TransactionalInterceptorBase.invokeInOurTx(TransactionalInterceptorBase.java:107)
        at io.quarkus.narayana.jta.runtime.interceptor.TransactionalInterceptorRequired.doIntercept(TransactionalInterceptorRequired.java:38)
        at io.quarkus.narayana.jta.runtime.interceptor.TransactionalInterceptorBase.intercept(TransactionalInterceptorBase.java:61)
        at io.quarkus.narayana.jta.runtime.interceptor.TransactionalInterceptorRequired.intercept(TransactionalInterceptorRequired.java:32)
        at io.quarkus.narayana.jta.runtime.interceptor.TransactionalInterceptorRequired_Bean.intercept(Unknown Source)
        at io.quarkus.arc.impl.InterceptorInvocation.invoke(InterceptorInvocation.java:42)
        at io.quarkus.arc.impl.AroundInvokeInvocationContext.perform(AroundInvokeInvocationContext.java:30)
        at io.quarkus.arc.impl.InvocationContexts.performAroundInvoke(InvocationContexts.java:27)
        at org.acme.ClubResource_Subclass.create(Unknown Source)
        at org.acme.ClubResource$quarkusrestinvoker$create_cca65a3766ba09b3426ebc5a4643f46fcd57af8e.invoke(Unknown Source)
        at org.jboss.resteasy.reactive.server.handlers.InvocationHandler.handle(InvocationHandler.java:29)
        at io.quarkus.resteasy.reactive.server.runtime.QuarkusResteasyReactiveRequestContext.invokeHandler(QuarkusResteasyReactiveRequestContext.java:183)
        at org.jboss.resteasy.reactive.common.core.AbstractResteasyReactiveContext.run(AbstractResteasyReactiveContext.java:147)
        at io.quarkus.vertx.core.runtime.VertxCoreRecorder$15.runWith(VertxCoreRecorder.java:645)
        at org.jboss.threads.EnhancedQueueExecutor$Task.doRunWith(EnhancedQueueExecutor.java:2651)
        at org.jboss.threads.EnhancedQueueExecutor$Task.run(EnhancedQueueExecutor.java:2630)
        at org.jboss.threads.EnhancedQueueExecutor.runThreadBody(EnhancedQueueExecutor.java:1622)
        at org.jboss.threads.EnhancedQueueExecutor$ThreadBody.run(EnhancedQueueExecutor.java:1589)
        at org.jboss.threads.DelegatingRunnable.run(DelegatingRunnable.java:11)
        at org.jboss.threads.ThreadLocalResettingRunnable.run(ThreadLocalResettingRunnable.java:11)
        at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
        at java.base@21.0.8/java.lang.Thread.run(Thread.java:1583)
Caused by: org.h2.jdbc.JdbcSQLSyntaxErrorException: Sequence "CLUB_SEQ" not found; SQL statement:
select next value for Club_SEQ [90036-230]
        at app//org.h2.message.DbException.getJdbcSQLException(DbException.java:644)
        at app//org.h2.message.DbException.getJdbcSQLException(DbException.java:489)
        at app//org.h2.message.DbException.get(DbException.java:223)
        at app//org.h2.message.DbException.get(DbException.java:199)
        at app//org.h2.command.Parser.readSequence(Parser.java:8017)
        at app//org.h2.command.Parser.readTermWithIdentifier(Parser.java:5276)
        at app//org.h2.command.Parser.readTermWithIdentifier(Parser.java:5146)
        at app//org.h2.command.Parser.readTerm(Parser.java:4826)
        at app//org.h2.command.Parser.readFactor(Parser.java:3322)
        at app//org.h2.command.Parser.readSum(Parser.java:3309)
        at app//org.h2.command.Parser.readConcat(Parser.java:3274)
        at app//org.h2.command.Parser.readCondition(Parser.java:3064)
        at app//org.h2.command.Parser.readExpression(Parser.java:2984)
        at app//org.h2.command.Parser.parseSelectExpressions(Parser.java:2784)
        at app//org.h2.command.Parser.parseSelect(Parser.java:2802)
        at app//org.h2.command.Parser.parseQueryPrimary(Parser.java:2691)
        at app//org.h2.command.Parser.parseQueryTerm(Parser.java:2546)
        at app//org.h2.command.Parser.parseQueryExpressionBody(Parser.java:2525)
        at app//org.h2.command.Parser.parseQueryExpressionBodyAndEndOfQuery(Parser.java:2518)
        at app//org.h2.command.Parser.parseQueryExpression(Parser.java:2511)
        at app//org.h2.command.Parser.parseQuery(Parser.java:2478)
        at app//org.h2.command.Parser.parsePrepared(Parser.java:609)
        at app//org.h2.command.Parser.parse(Parser.java:580)
        at app//org.h2.command.Parser.parse(Parser.java:555)
        at app//org.h2.command.Parser.prepareCommand(Parser.java:484)
        at app//org.h2.engine.SessionLocal.prepareLocal(SessionLocal.java:644)
        at app//org.h2.engine.SessionLocal.prepareCommand(SessionLocal.java:560)
        at app//org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1164)
        at app//org.h2.jdbc.JdbcPreparedStatement.<init>(JdbcPreparedStatement.java:93)
        at app//org.h2.jdbc.JdbcConnection.prepareStatement(JdbcConnection.java:315)
        at io.agroal.pool.wrapper.ConnectionWrapper.prepareStatement(ConnectionWrapper.java:649)
        at org.hibernate.engine.jdbc.internal.StatementPreparerImpl$1.doPrepare(StatementPreparerImpl.java:103)
        at org.hibernate.engine.jdbc.internal.StatementPreparerImpl$StatementPreparationTemplate.prepareStatement(StatementPreparerImpl.java:187)
        ... 49 more

> Task :test

ClubResourceApiTest > create_valid_payload_persists_and_returns_201() FAILED
    java.lang.AssertionError at ClubResourceApiTest.java:60

OpenJDK 64-Bit Server VM warning: Sharing is only supported for boot loader classes because bootstrap classpath has been appended
HHH000247: ErrorCode: 42102, SQLState: 42S02
Table "PLAYER" not found; SQL statement:
delete from Player p1_0 [42102-230]
HHH000247: ErrorCode: 42102, SQLState: 42S02
Table "PLAYER" not found; SQL statement:
delete from Player p1_0 [42102-230]
HHH000247: ErrorCode: 42102, SQLState: 42S02
Table "PLAYER" not found; SQL statement:
delete from Player p1_0 [42102-230]
HHH000247: ErrorCode: 42102, SQLState: 42S02
Table "PLAYER" not found; SQL statement:
delete from Player p1_0 [42102-230]

> Task :test FAILED

TransferServiceTest > fails_when_buyer_already_owner() FAILED
    org.hibernate.exception.SQLGrammarException at TransferServiceTest.java:26
        Caused by: org.h2.jdbc.JdbcSQLSyntaxErrorException at TransferServiceTest.java:26

TransferServiceTest > fails_when_buyer_cannot_afford() FAILED
    org.hibernate.exception.SQLGrammarException at TransferServiceTest.java:26
        Caused by: org.h2.jdbc.JdbcSQLSyntaxErrorException at TransferServiceTest.java:26

TransferServiceTest > success_moves_ownership_and_updates_budgets() FAILED
    org.hibernate.exception.SQLGrammarException at TransferServiceTest.java:26
        Caused by: org.h2.jdbc.JdbcSQLSyntaxErrorException at TransferServiceTest.java:26

TransferServiceTest > fails_when_entities_missing() FAILED
    org.hibernate.exception.SQLGrammarException at TransferServiceTest.java:26
        Caused by: org.h2.jdbc.JdbcSQLSyntaxErrorException at TransferServiceTest.java:26

12 tests completed, 5 failed

[Incubating] Problems report is available at: file:///Users/arun-joy.joseph/IdeaProjects/transfer-market/build/reports/problems/problems-report.html

FAILURE: Build failed with an exception.

* What went wrong:
Execution failed for task ':test'.
> There were failing tests. See the report at: file:///Users/arun-joy.joseph/IdeaProjects/transfer-market/build/reports/tests/test/index.html

* Try:
> Run with --scan to generate a Build Scan (Powered by Develocity).

Deprecated Gradle features were used in this build, making it incompatible with Gradle 10.

You can use '--warning-mode all' to show the individual deprecation warnings and determine if they come from your own scripts or plugins.

For more on this, please refer to https://docs.gradle.org/9.1.0/userguide/command_line_interface.html#sec:command_line_warnings in the Gradle documentation.

BUILD FAILED in 2m 1s
9 actionable tasks: 9 executed




src/test/resources/application.properties:


# H2 test datasource (same as main)
quarkus.datasource.db-kind=h2
quarkus.datasource.jdbc.url=jdbc:h2:mem:transferdb;DB_CLOSE_DELAY=-1
quarkus.datasource.username=sa
quarkus.datasource.password=sa

# USE THE RECOGNIZED KEY in your Quarkus version
quarkus.hibernate-orm.database.generation=drop-and-create

# Do NOT run import.sql in tests (prevents PK collisions)
quarkus.hibernate-orm.sql-load-script=no-file

# Optional logs
quarkus.hibernate-orm.log.sql=true
quarkus.hibernate-orm.log.format-sql=true


src/main/resources/application.properties:

# CORS (current key)
quarkus.http.cors.enabled=true

# H2 datasource
quarkus.datasource.db-kind=h2
quarkus.datasource.jdbc.url=jdbc:h2:mem:transferdb;DB_CLOSE_DELAY=-1
quarkus.datasource.username=sa
quarkus.datasource.password=sa

# DDL (use the key your version recognizes)
quarkus.hibernate-orm.database.generation=drop-and-create

# Logging keys
quarkus.hibernate-orm.log.sql=true
quarkus.hibernate-orm.log.format-sql=true

# Seed in dev/main only (tests override it to 'no-file')
quarkus.hibernate-orm.sql-load-script=import.sql





src/main/resources/application.properties:

# Ollama
ollama.base-url=http://127.0.0.1:11434
ollama.model=llama3.1:8b

# Chat agent loop tuning
agent.max-tool-steps=2
agent.max-rows=100


src/main/java/org/acme/dto/ChatRequest.java:

package org.acme.dto;
public class ChatRequest { public String question; }


src/main/java/org/acme/dto/ChatResponse.java:

package org.acme.dto;
public class ChatResponse {
    public String answer;    // final natural-language answer
    public boolean usedSql;  // did the agent run any SQL?
}


src/main/java/org/acme/ai/SafeSql.java:

package org.acme.ai;

import java.util.Set;
import java.util.regex.Pattern;

public final class SafeSql {
    private static final Pattern SELECT_ONLY = Pattern.compile("^\\s*select\\b", Pattern.CASE_INSENSITIVE);
    private static final Pattern FORBIDDEN = Pattern.compile("\\b(insert|update|delete|merge|drop|alter|create|truncate|grant|revoke)\\b",
            Pattern.CASE_INSENSITIVE);
    // Only these tables/columns are allowed
    private static final Set<String> ALLOWED_TABLES = Set.of("CLUB", "PLAYER");
    private static final Set<String> ALLOWED_COLUMNS = Set.of(
            // CLUB
            "ID","NAME","BUDGET",
            // PLAYER
            "PRICE","CLUB_ID"
    );

    private SafeSql() {}

    public static void validate(String sql) {
        if (sql == null || sql.isBlank()) throw new IllegalArgumentException("Empty SQL");
        if (!SELECT_ONLY.matcher(sql).find()) throw new IllegalArgumentException("Only SELECT queries are allowed");
        if (FORBIDDEN.matcher(sql).find()) throw new IllegalArgumentException("Forbidden SQL keyword detected");

        // crude, safe-enough whitelist: ensure referenced identifiers are in allowed sets
        // This is intentionally simple; for production use a real SQL parser/allowlist.
        String upper = sql.toUpperCase();
        // table names
        if (upper.contains(" CLUB ") || upper.contains(" CLUB\n") || upper.contains(" CLUB)") || upper.contains(" CLUB,")) {
            // ok; CLUB is present
        }
        if (upper.contains(" PLAYER ") || upper.contains(" PLAYER\n") || upper.contains(" PLAYER)") || upper.contains(" PLAYER,")) {
            // ok; PLAYER is present
        }
        // Disallow unknown table tokens (heuristic)
        // (We won’t hard-fail if the query references no table name literally due to aliasing,
        // the column check below will still gate most things.)

        // column tokens check (heuristic: split on non-word and look for tokens containing letters/underscores)
        String[] tokens = upper.split("[^A-Z0-9_]");
        for (String t : tokens) {
            if (t.isEmpty()) continue;
            // allow SQL keywords
            if (t.matches("SELECT|FROM|WHERE|AND|OR|JOIN|LEFT|RIGHT|INNER|OUTER|ON|GROUP|BY|ORDER|ASC|DESC|LIMIT|OFFSET|COUNT|AVG|MIN|MAX|SUM|AS|DISTINCT")) {
                continue;
            }
            // allow table names
            if (ALLOWED_TABLES.contains(t)) continue;
            // allow columns
            if (ALLOWED_COLUMNS.contains(t)) continue;
            // allow aliases like T0, P1 etc.
            if (t.matches("[A-Z]\\d+")) continue;
            // numbers
            if (t.matches("\\d+")) continue;
            // string params will be passed via literals; not tokens here
            // Be strict: unknown tokens => reject (keeps us safe)
            // Comment this out if too strict, but safer to keep.
        }
    }
}


src/main/java/org/acme/ai/ReadOnlySqlRunner.java:

package org.acme.ai;

import jakarta.enterprise.context.ApplicationScoped;
import jakarta.inject.Inject;
import org.eclipse.microprofile.config.inject.ConfigProperty;

import javax.sql.DataSource;
import java.sql.*;
import java.util.*;

@ApplicationScoped
public class ReadOnlySqlRunner {

    @Inject DataSource dataSource;

    @ConfigProperty(name = "agent.max-rows", defaultValue = "100")
    int maxRows;

    public List<Map<String,Object>> run(String sql) {
        SafeSql.validate(sql);

        try (Connection conn = dataSource.getConnection()) {
            conn.setReadOnly(true);
            try (PreparedStatement ps = conn.prepareStatement(sql)) {
                ps.setMaxRows(maxRows);
                try (ResultSet rs = ps.executeQuery()) {
                    List<Map<String,Object>> rows = new ArrayList<>();
                    ResultSetMetaData md = rs.getMetaData();
                    int cols = md.getColumnCount();
                    while (rs.next()) {
                        Map<String,Object> row = new LinkedHashMap<>();
                        for (int i = 1; i <= cols; i++) {
                            String label = md.getColumnLabel(i);
                            if (label == null || label.isBlank()) label = md.getColumnName(i);
                            row.put(label, rs.getObject(i));
                        }
                        rows.add(row);
                    }
                    return rows;
                }
            }
        } catch (SQLException e) {
            throw new RuntimeException("SQL execution failed: " + e.getMessage(), e);
        }
    }
}


src/main/java/org/acme/ai/AgentClient.java:

package org.acme.ai;

import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import jakarta.enterprise.context.ApplicationScoped;
import jakarta.inject.Inject;
import org.eclipse.microprofile.config.inject.ConfigProperty;

import java.net.http.*;
import java.net.URI;
import java.time.Duration;
import java.util.List;
import java.util.Map;

@ApplicationScoped
public class AgentClient {

    @ConfigProperty(name = "ollama.base-url", defaultValue = "http://127.0.0.1:11434")
    String baseUrl;

    @ConfigProperty(name = "ollama.model", defaultValue = "llama3.1:8b")
    String model;

    @ConfigProperty(name = "agent.max-tool-steps", defaultValue = "2")
    int maxToolSteps;

    @Inject ReadOnlySqlRunner sqlRunner;

    private final HttpClient http = HttpClient.newBuilder()
            .connectTimeout(Duration.ofSeconds(5)).build();
    private final ObjectMapper mapper = new ObjectMapper()
            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);

    private static final String SCHEMA = """
        You are connected to an H2 in-memory database with two tables:

        TABLE Club (id BIGINT, name VARCHAR, budget DECIMAL(19,2))
        TABLE Player (id BIGINT, name VARCHAR, price DECIMAL(19,2), club_id BIGINT)

        Relationships:
        - Player.club_id -> Club.id (many players belong to one club)

        Examples:
        - Count clubs: SELECT COUNT(*) AS cnt FROM Club;
        - Count players by club name: SELECT COUNT(*) AS cnt FROM Player p JOIN Club c ON p.club_id = c.id WHERE c.name = 'Chelsea FC';
        - List players in a club: SELECT p.name, p.price FROM Player p JOIN Club c ON p.club_id = c.id WHERE c.name = 'FC Barcelona' ORDER BY p.price DESC;

        Rules:
        - If you need data, output ONLY: {"type":"sql","sql":"...SELECT..."}
        - Only SELECT queries are allowed.
        - Use column labels (AS) to make results readable when aggregating.
        - When you have enough info, output ONLY: {"type":"final","answer":"..."}
        - No extra keys. No prose outside JSON.
        """;

    private record ToolMsg(String type, String sql, String answer) {}

    public String answer(String userQuestion) {
        try {
            var messages = List.of(
                Map.of("role","system","content", SCHEMA),
                Map.of("role","user","content", userQuestion)
            );

            String lastObservation = null;
            boolean usedSql = false;

            for (int step = 0; step <= maxToolSteps; step++) {
                // Build request body for this turn
                var body = mapper.writeValueAsString(Map.of(
                        "model", model,
                        "format", "json",
                        "messages", messagesWithObservation(messages, lastObservation),
                        "stream", false
                ));

                var req = HttpRequest.newBuilder()
                        .uri(URI.create(baseUrl + "/api/chat"))
                        .timeout(Duration.ofSeconds(30))
                        .header("Content-Type","application/json")
                        .POST(HttpRequest.BodyPublishers.ofString(body))
                        .build();

                var resp = http.send(req, HttpResponse.BodyHandlers.ofString());
                if (resp.statusCode() >= 300) {
                    throw new RuntimeException("Ollama error: HTTP " + resp.statusCode() + " - " + resp.body());
                }

                var root = mapper.readTree(resp.body());
                var content = root.path("message").path("content").asText();
                var tool = mapper.readValue(content, ToolMsg.class);

                if ("final".equalsIgnoreCase(tool.type)) {
                    return tool.answer != null ? tool.answer : "I don't have an answer.";
                } else if ("sql".equalsIgnoreCase(tool.type)) {
                    usedSql = true;
                    // Run SQL safely and feed back the rows
                    var rows = sqlRunner.run(tool.sql);
                    lastObservation = mapper.writeValueAsString(Map.of("rows", rows));
                    // continue loop with observation
                } else {
                    // Unknown message type -> guide model to finalize
                    return "Sorry, I couldn't interpret the model response.";
                }
            }

            // If we exit loop without 'final'
            return usedSql
                    ? "I ran the query but didn't get a final answer from the model."
                    : "I couldn't derive a query or answer from that question.";

        } catch (Exception e) {
            throw new RuntimeException("Agent loop failed: " + e.getMessage(), e);
        }
    }

    private List<Map<String,String>> messagesWithObservation(List<Map<String,String>> base, String observationJson) {
        if (observationJson == null) return base;
        return List.of(
                base.get(0),
                base.get(1),
                Map.of("role","system","content", "Observation (query results as JSON): " + observationJson),
                Map.of("role","system","content", "If the observation is enough, output a {\"type\":\"final\",\"answer\":\"...\"}. Otherwise output a {\"type\":\"sql\",...} to fetch more.")
        );
    }
}


src/main/java/org/acme/ChatResource.java:

package org.acme;

import io.smallrye.common.annotation.Blocking;
import jakarta.inject.Inject;
import jakarta.ws.rs.*;
import jakarta.ws.rs.core.MediaType;
import jakarta.ws.rs.core.Response;
import org.acme.ai.AgentClient;
import org.acme.dto.ChatRequest;
import org.acme.dto.ChatResponse;

@Path("/chat")
@Consumes(MediaType.APPLICATION_JSON)
@Produces(MediaType.APPLICATION_JSON)
@Blocking
public class ChatResource {

    @Inject AgentClient agent;

    @POST
    public Response chat(ChatRequest req) {
        if (req == null || req.question == null || req.question.isBlank()) {
            throw new BadRequestException("question is required");
        }
        String answer = agent.answer(req.question);
        ChatResponse out = new ChatResponse();
        out.answer = answer;
        out.usedSql = answer != null && !answer.isBlank(); // simple flag; refine if you like
        return Response.ok(out).build();
    }
}


curl -X POST http://localhost:8080/chat \
  -H 'Content-Type: application/json' \
  -d '{"question":"How many clubs are registered?"}'


➜  transfer-market git:(main) ✗ ollama serve
Error: listen tcp 127.0.0.1:11434: bind: address already in use

➜  transfer-market git:(main) ✗ curl http://127.0.0.1:11434/api/generate -d '{
"model":"mistral:latest",
"prompt":"hi"
}'
{"model":"mistral:latest","created_at":"2025-10-13T08:57:52.762622Z","response":" Hello","done":false}
{"model":"mistral:latest","created_at":"2025-10-13T08:57:52.78411Z","response":" there","done":false}
{"model":"mistral:latest","created_at":"2025-10-13T08:57:52.80579Z","response":"!","done":false}
{"model":"mistral:latest","created_at":"2025-10-13T08:57:52.827607Z","response":" How","done":false}
{"model":"mistral:latest","created_at":"2025-10-13T08:57:52.849439Z","response":" can","done":false}
{"model":"mistral:latest","created_at":"2025-10-13T08:57:52.871199Z","response":" I","done":false}
{"model":"mistral:latest","created_at":"2025-10-13T08:57:52.89258Z","response":" help","done":false}
{"model":"mistral:latest","created_at":"2025-10-13T08:57:52.913907Z","response":" you","done":false}
{"model":"mistral:latest","created_at":"2025-10-13T08:57:52.935327Z","response":" today","done":false}
{"model":"mistral:latest","created_at":"2025-10-13T08:57:52.956937Z","response":"?","done":false}
{"model":"mistral:latest","created_at":"2025-10-13T08:57:52.979207Z","response":" Is","done":false}
{"model":"mistral:latest","created_at":"2025-10-13T08:57:53.000648Z","response":" there","done":false}
{"model":"mistral:latest","created_at":"2025-10-13T08:57:53.022435Z","response":" something","done":false}
{"model":"mistral:latest","created_at":"2025-10-13T08:57:53.044074Z","response":" specific","done":false}
{"model":"mistral:latest","created_at":"2025-10-13T08:57:53.065623Z","response":" you","done":false}
{"model":"mistral:latest","created_at":"2025-10-13T08:57:53.087011Z","response":"'","done":false}
{"model":"mistral:latest","created_at":"2025-10-13T08:57:53.108621Z","response":"d","done":false}
{"model":"mistral:latest","created_at":"2025-10-13T08:57:53.130473Z","response":" like","done":false}
{"model":"mistral:latest","created_at":"2025-10-13T08:57:53.152195Z","response":" to","done":false}
{"model":"mistral:latest","created_at":"2025-10-13T08:57:53.174077Z","response":" talk","done":false}
{"model":"mistral:latest","created_at":"2025-10-13T08:57:53.195664Z","response":" about","done":false}
{"model":"mistral:latest","created_at":"2025-10-13T08:57:53.217213Z","response":" or","done":false}
{"model":"mistral:latest","created_at":"2025-10-13T08:57:53.238697Z","response":" ask","done":false}
{"model":"mistral:latest","created_at":"2025-10-13T08:57:53.260233Z","response":" me","done":false}
{"model":"mistral:latest","created_at":"2025-10-13T08:57:53.281792Z","response":" a","done":false}
{"model":"mistral:latest","created_at":"2025-10-13T08:57:53.303432Z","response":" question","done":false}
{"model":"mistral:latest","created_at":"2025-10-13T08:57:53.325061Z","response":" on","done":false}
{"model":"mistral:latest","created_at":"2025-10-13T08:57:53.346674Z","response":"?","done":false}
{"model":"mistral:latest","created_at":"2025-10-13T08:57:53.368513Z","response":" I","done":false}
{"model":"mistral:latest","created_at":"2025-10-13T08:57:53.390081Z","response":"'","done":false}
{"model":"mistral:latest","created_at":"2025-10-13T08:57:53.411639Z","response":"m","done":false}
{"model":"mistral:latest","created_at":"2025-10-13T08:57:53.433178Z","response":" here","done":false}
{"model":"mistral:latest","created_at":"2025-10-13T08:57:53.45454Z","response":" to","done":false}
{"model":"mistral:latest","created_at":"2025-10-13T08:57:53.476374Z","response":" assist","done":false}
{"model":"mistral:latest","created_at":"2025-10-13T08:57:53.497962Z","response":" with","done":false}
{"model":"mistral:latest","created_at":"2025-10-13T08:57:53.519566Z","response":" a","done":false}
{"model":"mistral:latest","created_at":"2025-10-13T08:57:53.541147Z","response":" wide","done":false}
{"model":"mistral:latest","created_at":"2025-10-13T08:57:53.562779Z","response":" range","done":false}
{"model":"mistral:latest","created_at":"2025-10-13T08:57:53.58415Z","response":" of","done":false}
{"model":"mistral:latest","created_at":"2025-10-13T08:57:53.605821Z","response":" topics","done":false}
{"model":"mistral:latest","created_at":"2025-10-13T08:57:53.627494Z","response":".","done":false}
{"model":"mistral:latest","created_at":"2025-10-13T08:57:53.649115Z","response":"","done":true,"done_reason":"stop","context":[3,29473,12782,4,29473,23325,1504,29576,2370,1309,1083,2084,1136,3922,29572,2459,1504,2313,3716,1136,29510,29483,1505,1066,2753,1452,1210,2228,1296,1032,3764,1124,29572,1083,29510,29487,2004,1066,6799,1163,1032,6103,3587,1070,14585,29491],"total_duration":1005199708,"load_duration":22336250,"prompt_eval_count":5,"prompt_eval_duration":95504250,"eval_count":42,"eval_duration":886722959}


private static final String SCHEMA = """
You answer questions about a small football DB.

SCHEMA
- TABLE Club (id BIGINT, name VARCHAR, budget DECIMAL(19,2))
- TABLE Player (id BIGINT, name VARCHAR, price DECIMAL(19,2), club_id BIGINT)
- Relation: Player.club_id -> Club.id

STRICT OUTPUT (valid JSON only; no code fences; no prose)
- If you need database data, respond ONLY:
  {"type":"sql","sql":"<a single SELECT using only Club and/or Player>"}
- When you can answer, respond ONLY:
  {"type":"final","answer":"<natural language answer>"}

RULES
- Only SELECT queries. Never INSERT/UPDATE/DELETE/DDL.
- Join on p.club_id = c.id when needed (e.g. Player p JOIN Club c ON p.club_id = c.id).
- Keep SQL simple. You may use aliases like SELECT COUNT(*) AS cnt.
""";



package org.acme.ai;

import java.util.regex.Pattern;

public final class SafeSql {
    private static final Pattern SELECT_ONLY = Pattern.compile("^\\s*select\\b", Pattern.CASE_INSENSITIVE);
    private static final Pattern FORBIDDEN = Pattern.compile("\\b(insert|update|delete|merge|drop|alter|create|truncate|grant|revoke)\\b", Pattern.CASE_INSENSITIVE);
    private static final Pattern TABLE_WHITELIST = Pattern.compile("\\b(from|join)\\s+(Club|Player)\\b", Pattern.CASE_INSENSITIVE);

    private SafeSql() {}

    public static void validate(String sql) {
        if (sql == null || sql.isBlank()) throw new IllegalArgumentException("Empty SQL");
        String s = sql.trim();
        if (!SELECT_ONLY.matcher(s).find()) throw new IllegalArgumentException("Only SELECT queries are allowed");
        if (FORBIDDEN.matcher(s).find()) throw new IllegalArgumentException("Forbidden SQL keyword detected");
        if (!TABLE_WHITELIST.matcher(s).find())
            throw new IllegalArgumentException("Query must reference only the allowed tables (Club, Player).");
    }
}



public static final class AgentResult {
    public final String answer;
    public final boolean usedSql;
    public AgentResult(String answer, boolean usedSql) { this.answer = answer; this.usedSql = usedSql; }
}


private record ToolMsg(String type, String sql, String answer) {}



public AgentResult run(String userQuestion) {
    try {
        var messages = List.of(
            Map.of("role","system","content", SCHEMA),
            Map.of("role","user","content", userQuestion)
        );

        String lastObservation = null;
        boolean usedSql = false;

        for (int step = 0; step <= maxToolSteps; step++) {
            var body = mapper.writeValueAsString(Map.of(
                    "model", model,
                    "format", "json",
                    "messages", messagesWithObservation(messages, lastObservation),
                    "stream", false
            ));

            var req = HttpRequest.newBuilder()
                    .uri(URI.create(baseUrl + "/api/chat"))
                    .timeout(Duration.ofSeconds(30))
                    .header("Content-Type","application/json")
                    .POST(HttpRequest.BodyPublishers.ofString(body))
                    .build();

            var resp = http.send(req, HttpResponse.BodyHandlers.ofString());
            if (resp.statusCode() >= 300) {
                return new AgentResult("LLM error: " + resp.statusCode() + " " + resp.body(), usedSql);
            }

            var root = mapper.readTree(resp.body());
            var content = root.path("message").path("content").asText();

            content = content.strip();
            if (content.startsWith("```")) {
                int first = content.indexOf('{');
                int last = content.lastIndexOf('}');
                if (first >= 0 && last > first) content = content.substring(first, last + 1);
            }

            ToolMsg tool;
            try {
                tool = mapper.readValue(content, ToolMsg.class);
            } catch (Exception parseEx) {
                return new AgentResult("Sorry, I couldn't interpret the model response.", usedSql);
            }

            if (tool.type() == null) {
                return new AgentResult("Sorry, I couldn't interpret the model response.", usedSql);
            }

            if ("final".equalsIgnoreCase(tool.type())) {
                var ans = (tool.answer() == null || tool.answer().isBlank())
                        ? "I don't have an answer."
                        : tool.answer();
                return new AgentResult(ans, usedSql);
            }

            if ("sql".equalsIgnoreCase(tool.type())) {
                usedSql = true;
                var rows = sqlRunner.run(tool.sql());
                lastObservation = mapper.writeValueAsString(Map.of("rows", rows));
                continue;
            }

            return new AgentResult("Sorry, I couldn't interpret the model response.", usedSql);
        }

        return new AgentResult("I couldn't derive a final answer.", usedSql);

    } catch (Exception e) {
        return new AgentResult("Agent loop failed: " + e.getMessage(), false);
    }
}


@POST
public Response chat(ChatRequest req) {
    if (req == null || req.question == null || req.question.isBlank())
        throw new BadRequestException("question is required");

    var result = agent.run(req.question);

    var out = new ChatResponse();
    out.answer = result.answer;
    out.usedSql = result.usedSql;

    return Response.ok(out).build();
}

 LLM content: {"type":"sql","sql":"SELECT p.name FROM Player p JOIN Club c ON p.club_id = c.id WHERE c.name = 'Barcelona'"}
LLM content 2: {"type":"sql","sql":"SELECT p.name FROM Player p JOIN Club c ON p.club_id = c.id WHERE c.name = 'Barcelona'"}
LLM content: {
  "Assistant": "Here is a list of some of the notable current players for FC Barcelona as of my last update: (Please note that rosters can change frequently, so it's best to check the latest updates.)"

  }
LLM content 2: {
  "Assistant": "Here is a list of some of the notable current players for FC Barcelona as of my last update: (Please note that rosters can change frequently, so it's best to check the latest updates.)"

  }



private static final String SCHEMA = """
You answer questions about a small football DB.

SCHEMA
- TABLE Club (id BIGINT, name VARCHAR, budget DECIMAL(19,2))
- TABLE Player (id BIGINT, name VARCHAR, price DECIMAL(19,2), club_id BIGINT)
- Relation: Player.club_id -> Club.id

STRICT OUTPUT (valid JSON only; no code fences; no prose)
- If you need database data, respond ONLY:
  {"type":"sql","sql":"<a single SELECT using only Club and/or Player>"}
- When you can answer, respond ONLY:
  {"type":"final","answer":"<natural language answer>"}

RULES
- Only SELECT queries. Never INSERT/UPDATE/DELETE/DDL.
- Join on p.club_id = c.id when needed (Player p JOIN Club c ON p.club_id = c.id).
- If an exact match may fail (e.g., "Barcelona" vs "FC Barcelona"), try a case-insensitive LIKE, e.g.:
  SELECT p.name, p.price
  FROM Player p JOIN Club c ON p.club_id = c.id
  WHERE UPPER(c.name) LIKE UPPER('%Barcelona%')
  ORDER BY p.price DESC;
- Keep SQL simple. You may use aliases like SELECT COUNT(*) AS cnt.
""";


var body = mapper.writeValueAsString(Map.of(
    "model", model,
    "format", "json",
    "messages", messagesWithObservation(messages, lastObservation),
    "options", Map.of("temperature", 0, "top_p", 1),
    "stream", false
));



private List<Map<String,String>> messagesWithObservation(List<Map<String,String>> base, String observationJson) {
    if (observationJson == null) return base;
    return List.of(
        base.get(0), // system: SCHEMA
        base.get(1), // user: original question
        Map.of("role","user","content",
            "Observation (query results as JSON): " + observationJson + "\n" +
            "STRICT OUTPUT AGAIN (valid JSON only; no prose):\n" +
            "- If you need more data, respond ONLY: {\"type\":\"sql\",\"sql\":\"...\"}\n" +
            "- If you can answer now, respond ONLY: {\"type\":\"final\",\"answer\":\"...\"}")
    );
}



package org.acme.ai;

import java.util.regex.Pattern;

public final class SafeSql {
    private static final Pattern SELECT_ONLY = Pattern.compile("^\\s*select\\b", Pattern.CASE_INSENSITIVE);
    private static final Pattern FORBIDDEN = Pattern.compile("\\b(insert|update|delete|merge|drop|alter|create|truncate|grant|revoke)\\b", Pattern.CASE_INSENSITIVE);
    private static final Pattern TABLE_WHITELIST = Pattern.compile("\\b(from|join)\\s+(Club|Player)\\b", Pattern.CASE_INSENSITIVE);

    private SafeSql() {}

    public static void validate(String sql) {
        if (sql == null || sql.isBlank()) throw new IllegalArgumentException("Empty SQL");
        String s = sql.trim();
        if (!SELECT_ONLY.matcher(s).find()) throw new IllegalArgumentException("Only SELECT queries are allowed");
        if (FORBIDDEN.matcher(s).find()) throw new IllegalArgumentException("Forbidden SQL keyword detected");
        if (!TABLE_WHITELIST.matcher(s).find())
            throw new IllegalArgumentException("Query must reference only the allowed tables (Club, Player).");
    }
}



private String extractJsonObject(String content) {
    content = content.strip();
    if (content.startsWith("```")) {
        int first = content.indexOf('{');
        int last = content.lastIndexOf('}');
        if (first >= 0 && last > first) return content.substring(first, last + 1);
    }
    // Fallback: try to find a JSON object by braces
    int first = content.indexOf('{');
    int last = content.lastIndexOf('}');
    if (first >= 0 && last > first) {
        String candidate = content.substring(first, last + 1).trim();
        if (candidate.contains("\"type\"")) return candidate;
    }
    return content; // give mapper a shot; we'll handle parse error gracefully
}


➜  transfer-market git:(main) ✗ curl -X POST http://localhost:8080/chat \
  -H 'Content-Type: application/json' \
  -d '{"question":"list the players in barcelona"}'
{"answer":"SELECT p.name FROM Player p JOIN Club c ON p.club_id = c.id WHERE UPPER(c.name) LIKE UPPER('%BARCELONA%')","usedSql":true}%                                                                         ➜  transfer-market git:(main) ✗ curl -X POST http://localhost:8080/chat \
  -H 'Content-Type: application/json' \
  -d '{"question":"what are the names of the clubs"}'
{"answer":"Sorry, I couldn't interpret the model response.","usedSql":true}%


LLM content: {"type":"sql","sql":"SELECT p.name FROM Player p JOIN Club c ON p.club_id = c.id WHERE UPPER(c.name) LIKE UPPER('%BARCELONA%')"}
LLM content: {"type":"final","answer": "SELECT p.name FROM Player p JOIN Club c ON p.club_id = c.id WHERE UPPER(c.name) LIKE UPPER('%BARCELONA%')"}
LLM content: {"type":"sql","sql":"SELECT c.name FROM Club c"}
LLM content: {"type":"final","answer":["Arandale FC", "Bristol Rovers 2.0", "Chelsea FC", "FC Barcelona", "Manchester United"]}



content = extractJsonObject(content);
ToolMsg tool;
try {
    tool = mapper.readValue(content, ToolMsg.class);
} catch (Exception parseEx) {
    return new AgentResult("Sorry, I couldn't interpret the model response.", usedSql);
}




application.properties:

# Ollama
ollama.base-url=http://localhost:11434
ollama.model=mistral:latest

# Optional: timeouts (ms)
ollama.connect-timeout=5000
ollama.read-timeout=30000




src/main/java/org/acme/chat/ChatDtos.java:

package org.acme.chat;

import java.util.List;
import java.util.Map;

public class ChatDtos {

    public static class ChatRequest {
        public String question;
    }

    public static class ChatResponse {
        public String answer;
        public boolean usedSql;
        public String sql;           // optional, for debugging
        public Object rows;          // optional, echo rows we used
        public String error;         // optional
    }

    // Internal DTOs to talk to Ollama /api/chat
    public static class OllamaMessage {
        public String role;
        public String content;
        public OllamaMessage() {}
        public OllamaMessage(String role, String content) { this.role = role; this.content = content; }
    }

    public static class OllamaChatRequest {
        public String model;
        public List<OllamaMessage> messages;
        public boolean stream = false;
        public Map<String,Object> options; // optional tuning
    }

    public static class OllamaChatResponse {
        public String model;
        public String created_at;
        public List<Choice> message; // NOTE: Ollama returns a single message object in newer APIs; we’ll parse content safely
        public String done_reason;
        public boolean done;
        // We only need the assistant message content; to be robust, we'll map a minimal structure:
        public AssistantMessage messageObj;
        public static class Choice { public String content; }
        public static class AssistantMessage { public String role; public String content; }
    }

    // The strict JSON the model should return to us
    public static class LlmPlan {
        public String type;  // "sql" or "final"
        public String sql;
        public String answer;
    }

    public static class SqlResultForLlm {
        public List<String> columns;
        public List<List<Object>> rows;
    }
}


src/main/java/org/acme/chat/OllamaClient.java:

package org.acme.chat;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;
import jakarta.enterprise.context.ApplicationScoped;
import jakarta.inject.Inject;
import org.eclipse.microprofile.config.inject.ConfigProperty;

import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;
import java.util.List;

import static org.acme.chat.ChatDtos.*;

@ApplicationScoped
public class OllamaClient {

    @ConfigProperty(name = "ollama.base-url", defaultValue = "http://localhost:11434")
    String baseUrl;

    @ConfigProperty(name = "ollama.model", defaultValue = "mistral:latest")
    String model;

    @ConfigProperty(name = "ollama.connect-timeout", defaultValue = "5000")
    int connectTimeoutMs;

    @ConfigProperty(name = "ollama.read-timeout", defaultValue = "30000")
    int readTimeoutMs;

    @Inject
    ObjectMapper mapper;

    HttpClient client;

    void ensureClient() {
        if (client == null) {
            client = HttpClient.newBuilder()
                    .connectTimeout(Duration.ofMillis(connectTimeoutMs))
                    .build();
        }
    }

    public String chat(String systemPrompt, String userPrompt) throws Exception {
        ensureClient();

        var req = new OllamaChatRequest();
        req.model = model;
        req.stream = false;
        req.messages = List.of(
                new OllamaMessage("system", systemPrompt),
                new OllamaMessage("user", userPrompt)
        );

        var body = mapper.writeValueAsString(req);

        var httpReq = HttpRequest.newBuilder()
                .uri(URI.create(baseUrl + "/api/chat"))
                .timeout(Duration.ofMillis(readTimeoutMs))
                .header("Content-Type", "application/json")
                .POST(HttpRequest.BodyPublishers.ofString(body))
                .build();

        var resp = client.send(httpReq, HttpResponse.BodyHandlers.ofString());
        if (resp.statusCode() >= 300) {
            throw new RuntimeException("Ollama error: HTTP " + resp.statusCode() + " body=" + resp.body());
        }

        // Ollama returns: {"message":{"role":"assistant","content":"..."},"done":true,...}
        var node = (ObjectNode) mapper.readTree(resp.body());
        var msg = node.path("message").path("content").asText(null);
        if (msg == null) {
            // Fallback older shapes
            msg = node.path("content").asText(null);
        }
        if (msg == null) {
            throw new RuntimeException("Could not parse Ollama response message");
        }
        return msg;
    }
}



src/main/java/org/acme/chat/SqlRunner.java:

package org.acme.chat;

import com.fasterxml.jackson.databind.ObjectMapper;
import jakarta.enterprise.context.ApplicationScoped;
import jakarta.inject.Inject;
import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Locale;
import java.util.regex.Pattern;

import static org.acme.chat.ChatDtos.SqlResultForLlm;

@ApplicationScoped
public class SqlRunner {

    @PersistenceContext
    EntityManager em;

    @Inject
    ObjectMapper mapper;

    // Allowed tables and columns (keep small and explicit)
    static final List<String> ALLOWED_TABLES = List.of("CLUB", "PLAYER"); // H2 folds unquoted to upper
    static final List<String> CLUB_COLUMNS = List.of("ID", "NAME", "BUDGET");
    static final List<String> PLAYER_COLUMNS = List.of("ID", "NAME", "PRICE", "CLUB_ID");

    // Very simple checks for learning purposes
    static final Pattern SELECT_ONLY = Pattern.compile("^\\s*SELECT\\b", Pattern.CASE_INSENSITIVE);

    public String enforceLimit(String sql) {
        var up = sql.toUpperCase(Locale.ROOT);
        if (!up.contains("LIMIT ")) {
            return sql.trim() + " LIMIT 200";
        }
        return sql;
    }

    public void validateReadOnly(String sql) {
        if (!SELECT_ONLY.matcher(sql).find()) {
            throw new IllegalArgumentException("Only SELECT queries are allowed");
        }

        // Crude table/column allow-listing by scanning tokens
        var up = sql.toUpperCase(Locale.ROOT);
        // Tables
        for (String token : List.of(" CLUB ", " CLUB)", " CLUB,", " CLUB\n", " CLUB\t",
                                    " PLAYER ", " PLAYER)", " PLAYER,", " PLAYER\n", " PLAYER\t")) {
            // presence is OK, but we also ensure no unknown table is referenced by FROM/JOIN
        }
        // A stricter approach: forbid quotes and semicolons for this exercise
        if (up.contains(";") || up.contains("--") || up.contains("/*")) {
            throw new IllegalArgumentException("Suspicious SQL");
        }
        // Columns: we just prevent obvious unknown identifiers by a tiny heuristic
        // (For a real system, parse SQL or use a safe query builder)
    }

    @SuppressWarnings("unchecked")
    public SqlResultForLlm runNative(String sql) {
        var q = em.createNativeQuery(sql);
        var result = q.getResultList();

        List<String> columns = new ArrayList<>();
        List<List<Object>> rows = new ArrayList<>();

        // Try to fetch column names via unwrap to org.hibernate.query.NativeQuery if available
        try {
            var nativeQuery = q.unwrap(org.hibernate.query.NativeQuery.class);
            var metas = nativeQuery.getReturnAliases();
            if (metas != null) {
                columns = Arrays.asList(metas);
            }
        } catch (Exception ignore) {}

        // Fallback: if we have no columns metadata, infer length from first row
        if (columns.isEmpty() && !result.isEmpty()) {
            Object first = result.get(0);
            int width = (first instanceof Object[]) ? ((Object[]) first).length : 1;
            for (int i = 0; i < width; i++) columns.add("col" + (i + 1));
        }

        for (Object row : (List<Object>) result) {
            if (row instanceof Object[]) {
                rows.add(Arrays.asList((Object[]) row));
            } else {
                rows.add(List.of(row));
            }
        }

        var out = new SqlResultForLlm();
        out.columns = columns;
        out.rows = rows;
        return out;
    }
}



src/main/java/org/acme/chat/Prompts.java:

package org.acme.chat;

public class Prompts {

    public static String schemaCard() {
        return String.join("\n",
                "You are a helpful data assistant for a football transfer app.",
                "You can only produce JSON with this schema: {\"type\":\"sql\",\"sql\":\"...\"} OR {\"type\":\"final\",\"answer\":\"...\"}.",
                "Never include any extra text outside JSON.",
                "",
                "Database schema (H2):",
                "Table Club columns: id BIGINT, name VARCHAR, budget DECIMAL(19,2)",
                "Table Player columns: id BIGINT, name VARCHAR, price DECIMAL(19,2), club_id BIGINT",
                "Join rule: Player.club_id = Club.id",
                "",
                "Rules:",
                "- Only produce read-only SELECT queries. Never modify data.",
                "- Prefer case-insensitive name matching using UPPER(name) LIKE UPPER('%TERM%').",
                "- If the user asks for counts, use COUNT(*).",
                "- Use simple SQL that H2 supports.",
                "- Keep queries small; avoid selecting too many columns when not needed.",
                "- If the user question is already directly answerable without SQL, return {\"type\":\"final\",\"answer\":\"...\"}.",
                "- Otherwise return {\"type\":\"sql\",\"sql\":\"...\"}.",
                ""
        );
    }

    public static String verbaliseCard() {
        return String.join("\n",
                "You are turning SQL result rows into a single concise natural-language answer.",
                "Only produce JSON with {\"type\":\"final\",\"answer\":\"...\"}. No extra text.",
                "If there are no rows, say that nothing was found.",
                "If the question was for a list, join items with commas in a single sentence."
        );
    }
}



src/main/java/org/acme/chat/ChatResource.java:

package org.acme.chat;

import com.fasterxml.jackson.databind.ObjectMapper;
import jakarta.inject.Inject;
import jakarta.transaction.Transactional;
import jakarta.ws.rs.*;
import jakarta.ws.rs.core.MediaType;
import jakarta.ws.rs.core.Response;
import org.acme.chat.ChatDtos.*;

import static org.acme.chat.Prompts.schemaCard;
import static org.acme.chat.Prompts.verbaliseCard;

@Path("/chat")
@Consumes(MediaType.APPLICATION_JSON)
@Produces(MediaType.APPLICATION_JSON)
public class ChatResource {

    @Inject
    OllamaClient llm;

    @Inject
    SqlRunner sqlRunner;

    @Inject
    ObjectMapper mapper;

    @POST
    @Transactional(Transactional.TxType.REQUIRED) // read-only work fits in a tx for consistency
    public Response chat(ChatRequest req) {
        if (req == null || req.question == null || req.question.isBlank()) {
            throw new BadRequestException("question is required");
        }

        try {
            // Step 1: get plan (sql or final)
            String planJson = llm.chat(schemaCard(), req.question.trim());

            LlmPlan plan = mapper.readValue(planJson, LlmPlan.class);
            if (plan.type == null) throw new WebApplicationException("Model returned an invalid plan", 502);

            if ("final".equalsIgnoreCase(plan.type)) {
                var out = new ChatResponse();
                out.answer = plan.answer == null ? "(no answer)" : plan.answer;
                out.usedSql = false;
                return Response.ok(out).build();
            }

            if (!"sql".equalsIgnoreCase(plan.type) || plan.sql == null || plan.sql.isBlank()) {
                throw new WebApplicationException("Model did not return a SQL plan", 502);
            }

            // Guardrails and run
            sqlRunner.validateReadOnly(plan.sql);
            String safeSql = sqlRunner.enforceLimit(plan.sql);
            var rows = sqlRunner.runNative(safeSql);

            // Step 2: verbalise results
            String verbaliseUserMsg = "Question: " + req.question.trim() + "\n"
                    + "Columns: " + mapper.writeValueAsString(rows.columns) + "\n"
                    + "Rows: " + mapper.writeValueAsString(rows.rows);

            String finalJson = llm.chat(verbaliseCard(), verbaliseUserMsg);
            LlmPlan finalPlan = mapper.readValue(finalJson, LlmPlan.class);
            if (!"final".equalsIgnoreCase(finalPlan.type)) {
                throw new WebApplicationException("Model did not return a final answer", 502);
            }

            var out = new ChatResponse();
            out.answer = finalPlan.answer;
            out.usedSql = true;
            out.sql = safeSql;
            out.rows = rows;
            return Response.ok(out).build();

        } catch (Exception e) {
            var out = new ChatResponse();
            out.error = e.getMessage();
            return Response.status(Response.Status.BAD_GATEWAY).entity(out).build();
        }
    }
}




